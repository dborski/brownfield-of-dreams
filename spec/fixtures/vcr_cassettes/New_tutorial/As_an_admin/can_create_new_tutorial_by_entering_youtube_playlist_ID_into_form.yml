---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlists?id=PL4pGkk3QBW28n6QCBWcmE76Ro7ONEzlMG&key=<YOUTUBE_API_KEY>&part=snippet,contentDetails
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 08 Jul 2020 03:22:11 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "kind": "youtube#playlistListResponse",
          "etag": "B8aM-4-4fnKXYj3ZmD9HmbG55bs",
          "pageInfo": {
            "totalResults": 1,
            "resultsPerPage": 5
          },
          "items": [
            {
              "kind": "youtube#playlist",
              "etag": "nNNPucXwhE3BaW1naF8xUENGTnI",
              "id": "PL4pGkk3QBW28n6QCBWcmE76Ro7ONEzlMG",
              "snippet": {
                "publishedAt": "2019-03-30T21:14:02Z",
                "channelId": "UC_13RMJbxIPSOODLNXh_7EQ",
                "title": "PINK FLOYD MUSIC PLAYLIST",
                "description": "",
                "thumbnails": {
                  "default": {
                    "url": "https://i.ytimg.com/vi/TvChSZBKb6A/default.jpg",
                    "width": 120,
                    "height": 90
                  },
                  "medium": {
                    "url": "https://i.ytimg.com/vi/TvChSZBKb6A/mqdefault.jpg",
                    "width": 320,
                    "height": 180
                  },
                  "high": {
                    "url": "https://i.ytimg.com/vi/TvChSZBKb6A/hqdefault.jpg",
                    "width": 480,
                    "height": 360
                  },
                  "standard": {
                    "url": "https://i.ytimg.com/vi/TvChSZBKb6A/sddefault.jpg",
                    "width": 640,
                    "height": 480
                  },
                  "maxres": {
                    "url": "https://i.ytimg.com/vi/TvChSZBKb6A/maxresdefault.jpg",
                    "width": 1280,
                    "height": 720
                  }
                },
                "channelTitle": "Rose Thorn",
                "localized": {
                  "title": "PINK FLOYD MUSIC PLAYLIST",
                  "description": ""
                }
              },
              "contentDetails": {
                "itemCount": 131
              }
            }
          ]
        }
  recorded_at: Wed, 08 Jul 2020 03:22:11 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&pageToken&part=snippet,contentDetails,status&playlistId=PL4pGkk3QBW28n6QCBWcmE76Ro7ONEzlMG
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 08 Jul 2020 03:22:11 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtTGlzdFJlc3BvbnNlIiwKICAiZXRhZyI6ICI4RTFqcjF3VU5BSFpIWl9aYmtTY2t6Rk9DVW8iLAogICJuZXh0UGFnZVRva2VuIjogIkNESVFBQSIsCiAgIml0ZW1zIjogWwogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIjY3NkdPaUotSlh1SjVYbjhjMGhnbklLczg1NCIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NHdPVEEzT1RaQk56VkVNVFV6T1RNeSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTAzLTMwVDIxOjE1OjEwWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gU2hpbmUgT24gWW91IENyYXp5IERpYW1vbmQgW09mZmljaWFsIE11c2ljIFZpZGVvXSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlwiU2hpbmUgT24gWW91IENyYXp5IERpYW1vbmRcIiBpcyBhIG5pbmUtcGFydCBQaW5rIEZsb3lkIGNvbXBvc2l0aW9uIHdyaXR0ZW4gYnkgUm9nZXIgV2F0ZXJzLCBSaWNoYXJkIFdyaWdodCBhbmQgRGF2aWQgR2lsbW91ci4gSXQgaXMgYSB0cmlidXRlIHRvIGZvcm1lciBiYW5kIG1lbWJlciBTeWQgQmFycmV0dC4gVGhlIHNvbmcgd2FzIGZpcnN0IHBlcmZvcm1lZCBvbiB0aGVpciAxOTc0IEZyZW5jaCB0b3VyLCBhbmQgcmVjb3JkZWQgZm9yIHRoZWlyIDE5NzUgY29uY2VwdCBhbGJ1bSBXaXNoIFlvdSBXZXJlIEhlcmUuIFRoZSBzb25nIHdhcyBpbnRlbmRlZCB0byBiZSBhIHNpZGUtbG9uZyBjb21wb3NpdGlvbiAobGlrZSBcIkF0b20gSGVhcnQgTW90aGVyXCIgYW5kIFwiRWNob2VzXCIpLCBidXQgd2FzIHVsdGltYXRlbHkgc3BsaXQgaW50byB0d28gcGFydHMgYW5kIHVzZWQgdG8gYm9va2VuZCB0aGUgYWxidW0sIHdpdGggbmV3IG1hdGVyaWFsIGNvbXBvc2VkIHRoYXQgd2FzIG1vcmUgcmVsZXZhbnQgdG8gdGhpcyBzb25nLCBhbmQgdG8gdGhlIHNpdHVhdGlvbiBpbiB3aGljaCB0aGUgYmFuZCBmb3VuZCB0aGVtc2VsdmVzLlxuXG58IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2hpbmVfT25fWW91X0NyYXp5X0RpYW1vbmRcblxuTHlyaWNzOlxuXG5SZW1lbWJlciB3aGVuIHlvdSB3ZXJlIHlvdW5nLCB5b3Ugc2hvbmUgbGlrZSB0aGUgc3VuLlxuU2hpbmUgb24geW91IGNyYXp5IGRpYW1vbmQuXG5Ob3cgdGhlcmUncyBhIGxvb2sgaW4geW91ciBleWVzLCBsaWtlIGJsYWNrIGhvbGVzIGluIHRoZSBza3kuXG5TaGluZSBvbiB5b3UgY3JhenkgZGlhbW9uZC5cbllvdSB3ZXJlIGNhdWdodCBpbiB0aGUgY3Jvc3MgZmlyZSBvZiBjaGlsZGhvb2QgYW5kIHN0YXJkb20uXG5CbG93biBvbiB0aGUgc3RlZWwgYnJlZXplLlxuQ29tZSBvbiB5b3UgdGFyZ2V0IGZvciBmYXJhd2F5IGxhdWdodGVyLlxuQ29tZSBvbiB5b3Ugc3RyYW5nZXIsIHlvdSBsZWdlbmQsIHlvdSBtYXJ0eXIsIGFuZCBzaGluZSFcblxuWW91IHJlYWNoZWQgZm9yIHRoZSBzZWNyZXQgdG9vIHNvb24sIHlvdSBjcmllZCBmb3IgdGhlIG1vb24uXG5TaGluZSBvbiB5b3UgY3JhenkgZGlhbW9uZC5cblRocmVhdGVuZWQgYnkgc2hhZG93cyBhdCBuaWdodCwgYW5kIGV4cG9zZWQgaW4gdGhlIGxpZ2h0LlxuU2hpbmUgb24geW91IGNyYXp5IGRpYW1vbmQuXG5XZWxsIHlvdSB3b3JlIG91dCB5b3VyIHdlbGNvbWUgd2l0aCByYW5kb20gcHJlY2lzaW9uLlxuUm9kZSBvbiB0aGUgc3RlZWwgYnJlZXplLlxuQ29tZSBvbiB5b3UgcmF2ZXIsIHlvdSBzZWVyIG9mIHZpc2lvbnMuXG5Db21lIG9uIHlvdSBwYWludGVyLCB5b3UgcGlwZXIsIHlvdSBwcmlzb25lciwgYW5kIHNoaW5lISIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2NXR0U5R2kwYkIwL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvY1dHRTlHaTBiQjAvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvY1dHRTlHaTBiQjAvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2NXR0U5R2kwYkIwL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiY1dHRTlHaTBiQjAiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiY1dHRTlHaTBiQjAiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTMtMDYtMDVUMTQ6NDk6MDVaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJYdHU2bXZGN2FZdW9lc093SlZwdFpPODBEX3ciLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTR4TWtWR1FqTkNNVU0xTjBSRk5FVXgiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToxNjowNloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIFNvcnJvdyAoMjAxMSAtIFJlbWFzdGVyKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNvcnJvdyAtIDIwMTEgUmVtYXN0ZXJcbkFsYnVtOiBBIG1vbWVudGFyeSBsYXBzZSBvZiByZWFzb24gKDE5ODcpXG5MeXJpY3M6XG5UaGUgc3dlZXQgc21lbGwgb2YgYSBncmVhdCBzb3Jyb3cgbGllcyBvdmVyIHRoZSBsYW5kXG5QbHVtZXMgb2Ygc21va2UgcmlzZSBhbmQgbWVyZ2UgaW50byB0aGUgbGVhZGVuIHNreTpcbkEgbWFuIGxpZXMgYW5kIGRyZWFtcyBvZiBncmVlbiBmaWVsZHMgYW5kIHJpdmVycyxcbkJ1dCBhd2FrZXMgdG8gYSBtb3JuaW5nIHdpdGggbm8gcmVhc29uIGZvciB3YWtpbmdcblxuSGUncyBoYXVudGVkIGJ5IHRoZSBtZW1vcnkgb2YgYSBsb3N0IHBhcmFkaXNlXG5JbiBoaXMgeW91dGggb3IgYSBkcmVhbSwgaGUgY2FuJ3QgYmUgcHJlY2lzZVxuSGUncyBjaGFpbmVkIGZvcmV2ZXIgdG8gYSB3b3JsZCB0aGF0J3MgZGVwYXJ0ZWRcbkl0J3Mgbm90IGVub3VnaCwgaXQncyBub3QgZW5vdWdoXG5cbkhpcyBibG9vZCBoYXMgZnJvemVuICYgY3VyZGxlZCB3aXRoIGZyaWdodFxuSGlzIGtuZWVzIGhhdmUgdHJlbWJsZWQgJiBnaXZlbiB3YXkgaW4gdGhlIG5pZ2h0XG5IaXMgaGFuZCBoYXMgd2Vha2VuZWQgYXQgdGhlIG1vbWVudCBvZiB0cnV0aFxuSGlzIHN0ZXAgaGFzIGZhbHRlcmVkXG5cbk9uZSB3b3JsZCwgb25lIHNvdWxcblRpbWUgcGFzcywgcml2ZXIgcm9sbFxuXG5BbmQgaGUgdGFsa3MgdG8gdGhlIHJpdmVyIG9mIGxvc3QgbG92ZSBhbmQgZGVkaWNhdGlvblxuQW5kIHNpbGVudCByZXBsaWVzIHRoYXQgc3dpcmwgaW52aXRhdGlvblxuRmxvdyBkYXJrIGFuZCB0cm91YmxlZCB0byBhbiBvaWx5IHNlYVxuQSBncmltIGludGltYXRpb24gb2Ygd2hhdCBpcyB0byBiZVxuXG5UaGVyZSdzIGFuIHVuY2Vhc2luZyB3aW5kIHRoYXQgYmxvd3MgdGhyb3VnaCB0aGlzIG5pZ2h0XG5BbmQgdGhlcmUncyBkdXN0IGluIG15IGV5ZXMsIHRoYXQgYmxpbmRzIG15IHNpZ2h0XG5BbmQgc2lsZW5jZSB0aGF0IHNwZWFrcyBzbyBtdWNoIGxvdWRlciB0aGFuIHdvcmRzLFxuT2YgcHJvbWlzZXMgYnJva2VuXG5cbuKElyBEaWdpdGFsIFJlbWFzdGVyIDIwMTEgVGhlIGNvcHlyaWdodCBpbiB0aGlzIHNvdW5kIHJlY29yZGluZyBpcyBvd25lZCBieSBQaW5rIEZsb3lkIE11c2ljIEx0ZC9QaW5rIEZsb3lkICgxOTg3KSBMdGQuXG5BbGwgcmlnaHRzIGdvIHRvIFBpbmsgRmxveWQgYW5kIEVNSSBNdXNpY1xuQ29weXJpZ2h0IMKpIFdNRyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1R2Q2hTWkJLYjZBL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVHZDaFNaQktiNkEvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVHZDaFNaQktiNkEvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1R2Q2hTWkJLYjZBL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVHZDaFNaQktiNkEvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDEsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIlR2Q2hTWkJLYjZBIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIlR2Q2hTWkJLYjZBIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE0LTAxLTI0VDIzOjAyOjEzWiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiRkx4OXZtQkNYQlV3V2c3bHhBN1lvSXNvNjhrIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0MU16SkNRakJDTkRJeVJrSkROMFZEIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjE6MTY6MThaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBNYXJvb25lZCAoT2ZmaWNpYWwgTXVzaWMgVmlkZW8gSEQpIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiT3V0IG5vdzogUGluayBGbG95ZCdzICdUaGUgTGF0ZXIgWWVhcnMnIGJveCBzZXQgaHR0cHM6Ly9waW5rZmxveWQubG5rLnRvL1RoZUxhdGVyWWVhcnNcclxuXG5QaW5rIEZsb3lkIC0gTWFyb29uZWQgKE9mZmljaWFsIE11c2ljIFZpZGVvKSBUbyBoZWxwIGNlbGVicmF0ZSB0aGUgMjV0aCBhbm5pdmVyc2FyeSBvZiBQaW5rIEZsb3lkJ3MgVGhlIERpdmlzaW9uIEJlbGwsIGlzIGEgbGltaXRlZCByZWxlYXNlIG9mIHRoZSBhbGJ1bSBpbiB0cmFuc2x1Y2VudCBibHVlLCBoZWF2eXdlaWdodCB2aW55bCBhcyBhIDJMUCBzZXQuIEl0IGVjaG9lcyB0aGUgb3JpZ2luYWwgbGltaXRlZCBibHVlIHZpbnlsIHJlbGVhc2UgYnkgQ29sdW1iaWEgUmVjb3JkcyBpbiAxOTk0LiBPcmRlciBub3cgdGhyb3VnaCBodHRwczovL3BpbmtmbG95ZC5sbmsudG8vREIyNUZBXG5cbkZpdmUgeWVhcnMgYWdvLCB0aGUgdmlkZW8gZm9yIE1hcm9vbmVkIHdhcyByZWxlYXNlZCwgdGhlbiBtYXJraW5nIHRoZSAyMHRoIGFubml2ZXJzYXJ5IG9mIFBpbmsgRmxveWQncyBUaGUgRGl2aXNpb24gQmVsbC4gTXVjaCBvZiB0aGUgdGhvdWdodC1wcm92b2tpbmcgdmlkZW8gd2FzIHNob3QgYnkgdGhlIEZsb3lkJ3MgQ3JlYXRpdmUgRGlyZWN0b3IgQXVicmV5ICdQbycgUG93ZWxsIGluIFByaXB5YXQsIFVrcmFpbmUsIGNsb3NlIHRvIHRoZSBDaGVybm9ieWwgbnVjbGVhciBwb3dlciBwbGFudCwgYnV0IHRoZXJlIGlzIGFsc28gZm9vdGFnZSBwcm92aWRlZCBieSBOQVNBIGxvb2tpbmcgZG93biBhdCB0aGUgcGxhbmV0IGZyb20gdGhlIEludGVybmF0aW9uYWwgU3BhY2UgU3RhdGlvbi5cblxuUmVsZWFzZWQgb24gUGluayBGbG95ZCBSZWNvcmRzIChjYXRhbG9ndWUgbnVtYmVyIFBGUkxQIDMxKSB0aGlzIGxpbWl0ZWQgcmVsZWFzZSBmZWF0dXJlcyB0aGUgMjAxNCBtYXN0ZXIgYnkgSmFtZXMgR3V0aHJpZSwgSm9lbCBQbGFudGUgYW5kIHRoZSBsYXRlIERvdWcgU2F4IG9mIHRoZSBNYXN0ZXJpbmcgTGFiLCBDYWxpZm9ybmlhLiBUaGUgMkxQIHZlcnNpb24gb2YgVGhlIERpdmlzaW9uIEJlbGwgZmVhdHVyZXMgZnVsbC1sZW5ndGggdHJhY2tzIHRocm91Z2hvdXQgKHRoZSBvcmlnaW5hbCAxOTk0IHZpbnlsIHJlbGVhc2UgaGFkIHRyYWNrcyBlZGl0ZWQgdG8gZml0IG9udG8gMSBMUCksIGEgZ2F0ZWZvbGQgc2xlZXZlIHdpdGggZm91ciBkaWZmZXJlbnQgaW1hZ2VzIG9mIHNwZWNpYWxseS1jcmVhdGVkIGhlYWRzLCBhbmQgdHdvIGZ1bGwtY29sb3VyIGx5cmljL2ltYWdlIGlubmVyIGJhZ3MuXG5cblRIRSBMQVRFUiBZRUFSU1xyXG5JbmNsdWRlZCBvbiDigJhUaGUgTGF0ZXIgWWVhcnPigJksIGEgMTgtZGlzYyBib3ggc2V0ICg1eENEcywgNnhCbHUtUmF5cywgNXhEVkRzLDJ4N+KAnSkgY292ZXJpbmcgdGhlIG1hdGVyaWFsIGNyZWF0ZWQgYnkgRGF2aWQgR2lsbW91ciwgTmljayBNYXNvbiBhbmQgUmljaGFyZCBXcmlnaHQgZnJvbSAxOTg3IG9ud2FyZHMsIHdpdGggdW5yZWxlYXNlZCBhdWRpbyBhbmQgYXVkaW92aXN1YWwgbWF0ZXJpYWwsIGluY2x1ZGluZyB0aGUgMTk4OSBWZW5pY2UgYW5kIDE5OTAgS25lYndvcnRoIGNvbmNlcnRzLCBhcyB3ZWxsIGFzIHVwZGF0ZWQsIHJlc3RvcmVkIGFuZCByZW1peGVkIGF1ZGlvIGFuZCB2aWRlbywgMiB4IDfigJ0gc2luZ2xlcywgNjAtcGFnZSBoYXJkYmFjayBQaG90byBCb29rLCA0MC1wYWdlIGhhcmRiYWNrIENyZWRpdHMgQm9vaywgTHlyaWNzIEJvb2ssIDMgeCByZXByb2R1Y3Rpb24gdG91ciBwcm9ncmFtbWVzLCBjYXJkIGVudmVsb3BlIGNvbnRhaW5pbmcgY29sbGVjdGlibGUgbWVtb3JhYmlsaWEsIHBsdXMgQmx1LXJheXMgYW5kIERWRHMgaW4gaW5kaXZpZHVhbCB3YWxsZXRzLlxyXG5cclxuQWxzbyBhdmFpbGFibGU6IDEyLXRyYWNrIOKAmEhpZ2hsaWdodHPigJkgcGFja2FnZSAoMi1MUCBvciAxLUNEKSBodHRwczovL3BpbmtmbG95ZC5sbmsudG8vVGhlTGF0ZXJZZWFyc1xyXG5cclxuUElOSyBGTE9ZRCBTT0NJQUwgTUVESUFcclxuRmFjZWJvb2sgaHR0cDovL3NtYXJ0dXJsLml0L1BGX0ZCXHJcblR3aXR0ZXIgaHR0cDovL3NtYXJ0dXJsLml0L1BGX1R3aXR0ZXJcclxuSW5zdGFncmFtIGh0dHA6Ly9zbWFydHVybC5pdC9QRl9JbnN0YWdyYW1cclxuU3BvdGlmeSBodHRwOi8vc21hcnR1cmwuaXQvUEZfU3BvdGlmeVxyXG5Zb3VUdWJlIGh0dHA6Ly9zbWFydHVybC5pdC9QRl9ZVFxyXG5BcHBsZSBodHRwOi8vc21hcnR1cmwuaXQvUEZfQXBwbGVcblxuI1BpbmtGbG95ZCAjVGhlTGF0ZXJZZWFycyAjUmVtYXN0ZXJlZCAjTGF0ZXJZZWFycyAjVGhlRGl2aXNpb25CZWxsICNEaXZpc2lvbkJlbGwiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QN1lNSTM5c09iWS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1A3WU1JMzlzT2JZL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1A3WU1JMzlzT2JZL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9QN1lNSTM5c09iWS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDIsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIlA3WU1JMzlzT2JZIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIlA3WU1JMzlzT2JZIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE0LTA1LTIwVDE0OjE3OjQyWiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiVVRWNDhWV3dsMEpsdDBxelJWbUZKRDNlTUlrIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk1RFFVTkVSRFEyTmtJelJVUXhOVFkxIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjE6MTY6MjlaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBIaWdoIEhvcGVzIChPZmZpY2lhbCBNdXNpYyBWaWRlbyBIRCkiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJOb3cgYXZhaWxhYmxlIGluIEhEIHRoaXMgbmV3IHZlcnNpb24gd2FzIHNwZWNpYWxseSByZS1zY2FubmVkIGFuZCByZXN0b3JlZCBmb3IgaW5jbHVzaW9uIGluIHRoZSBMYXRlciBZZWFycyBib3ggc2V0LiBUaGUgb2ZmaWNpYWwgcHJvbW8gdmlkZW8gZm9yICdIaWdoIEhvcGVzJyBieSBQaW5rIEZsb3lkLCB0YWtlbiBmcm9tIHRoZSBhbGJ1bSAnVGhlIERpdmlzaW9uIEJlbGwnLlxuXG5PdXQgbm93OiBQaW5rIEZsb3lkJ3MgJ1RoZSBMYXRlciBZZWFycycgYm94IHNldCBodHRwczovL3BpbmtmbG95ZC5sbmsudG8vVGhlTGF0ZXJZZWFyc1xyXG5cblRIRSBMQVRFUiBZRUFSU1xyXG5JbmNsdWRlZCBvbiDigJhUaGUgTGF0ZXIgWWVhcnPigJksIGEgMTgtZGlzYyBib3ggc2V0ICg1eENEcywgNnhCbHUtUmF5cywgNXhEVkRzLDJ4N+KAnSkgY292ZXJpbmcgdGhlIG1hdGVyaWFsIGNyZWF0ZWQgYnkgRGF2aWQgR2lsbW91ciwgTmljayBNYXNvbiBhbmQgUmljaGFyZCBXcmlnaHQgZnJvbSAxOTg3IG9ud2FyZHMsIHdpdGggdW5yZWxlYXNlZCBhdWRpbyBhbmQgYXVkaW92aXN1YWwgbWF0ZXJpYWwsIGluY2x1ZGluZyB0aGUgMTk4OSBWZW5pY2UgYW5kIDE5OTAgS25lYndvcnRoIGNvbmNlcnRzLCBhcyB3ZWxsIGFzIHVwZGF0ZWQsIHJlc3RvcmVkIGFuZCByZW1peGVkIGF1ZGlvIGFuZCB2aWRlbywgMiB4IDfigJ0gc2luZ2xlcywgNjAtcGFnZSBoYXJkYmFjayBQaG90byBCb29rLCA0MC1wYWdlIGhhcmRiYWNrIENyZWRpdHMgQm9vaywgTHlyaWNzIEJvb2ssIDMgeCByZXByb2R1Y3Rpb24gdG91ciBwcm9ncmFtbWVzLCBjYXJkIGVudmVsb3BlIGNvbnRhaW5pbmcgY29sbGVjdGlibGUgbWVtb3JhYmlsaWEsIHBsdXMgQmx1LXJheXMgYW5kIERWRHMgaW4gaW5kaXZpZHVhbCB3YWxsZXRzLlxyXG5cclxuQWxzbyBhdmFpbGFibGU6IDEyLXRyYWNrIOKAmEhpZ2hsaWdodHPigJkgcGFja2FnZSAoMi1MUCBvciAxLUNEKSBodHRwczovL3BpbmtmbG95ZC5sbmsudG8vVGhlTGF0ZXJZZWFyc1xyXG5cclxuUElOSyBGTE9ZRCBTT0NJQUwgTUVESUFcclxuRmFjZWJvb2sgaHR0cDovL3NtYXJ0dXJsLml0L1BGX0ZCXHJcblR3aXR0ZXIgaHR0cDovL3NtYXJ0dXJsLml0L1BGX1R3aXR0ZXJcclxuSW5zdGFncmFtIGh0dHA6Ly9zbWFydHVybC5pdC9QRl9JbnN0YWdyYW1cclxuU3BvdGlmeSBodHRwOi8vc21hcnR1cmwuaXQvUEZfU3BvdGlmeVxyXG5Zb3VUdWJlIGh0dHA6Ly9zbWFydHVybC5pdC9QRl9ZVFxyXG5BcHBsZSBodHRwOi8vc21hcnR1cmwuaXQvUEZfQXBwbGVcblxuI1BpbmtGbG95ZCAjVGhlTGF0ZXJZZWFycyAjUmVtYXN0ZXJlZCAjTGF0ZXJZZWFycyAjVGhlRGl2aXNpb25CZWxsICNEaXZpc2lvbkJlbGwiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS83ak1sRlhvdVBrOC9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzdqTWxGWG91UGs4L21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzdqTWxGWG91UGs4L2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS83ak1sRlhvdVBrOC9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDMsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIjdqTWxGWG91UGs4IgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIjdqTWxGWG91UGs4IiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE0LTA2LTI3VDE3OjAzOjEyWiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAicm01SWVDY1NVY0ZWTWZZMTMtMjNUWWFvbVJjIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0NU5EazFSRVpFTnpoRU16VTVNRFF6IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjE6MTY6NDBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBQaWdzIChUaHJlZSBEaWZmZXJlbnQgT25lcykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJwaWNzICYgcGlncyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzJPa2QzT3lpaTdFL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMk9rZDNPeWlpN0UvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMk9rZDNPeWlpN0UvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzJPa2QzT3lpaTdFL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvMk9rZDNPeWlpN0UvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDQsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIjJPa2QzT3lpaTdFIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIjJPa2QzT3lpaTdFIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDEzLTA1LTI0VDAyOjQzOjM1WiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiSWhoZEtMTjk2NDN1eWI1Y1dMUDVNRGpmS19jIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk1R05qTkRSRFJFTURReE9UaENNRFEyIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjE6MTY6NTdaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBEb2dzIC0gdy9seXJpY3MiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJQaW5rIEZsb3lkIC0gRG9nc1xuQW5pbWFscyAoMTk3NylcbipObyBjb3B5cmlnaHQgaW5mcmluZ2VtZW50IGludGVuZGVkLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3FpYUY0a3V4SmNvL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcWlhRjRrdXhKY28vbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvcWlhRjRrdXhKY28vaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiA1LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJxaWFGNGt1eEpjbyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJxaWFGNGt1eEpjbyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxMi0xMC0wOVQxODo0NDozM1oiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIlpxRklMTGMyNGxkaE10U3JmMXZMcldOcDN3NCIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NDBOelpDTUVSRE1qVkVOMFJGUlRoQiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTAzLTMwVDIxOjE3OjE1WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gVGltZSAoTHlyaWNzIGluY2x1ZGVkKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkx5cmljczogXHJcblRpY2tpbmcgYXdheSB0aGUgbW9tZW50cyB0aGF0IG1ha2UgdXAgYSBkdWxsIGRheSBcclxuRnJpdHRlciBhbmQgd2FzdGUgdGhlIGhvdXJzIGluIGFuIG9mZmhhbmQgd2F5XHJcbktpY2tpbmcgYXJvdW5kIG9uIGEgcGllY2Ugb2YgZ3JvdW5kIGluIHlvdXIgaG9tZSB0b3duXHJcbldhaXRpbmcgZm9yIHNvbWVvbmUgb3Igc29tZXRoaW5nIHRvIHNob3cgeW91IHRoZSB3YXlcclxuXHJcblRpcmVkIG9mIGx5aW5nIGluIHRoZSBzdW5zaGluZSBzdGF5aW5nIGhvbWUgdG8gd2F0Y2ggdGhlIHJhaW5cclxuQW5kIHlvdSBhcmUgeW91bmcgYW5kIGxpZmUgaXMgbG9uZyBhbmQgdGhlcmUgaXMgdGltZSB0byBraWxsIHRvZGF5XHJcbkFuZCB0aGVuIG9uZSBkYXkgeW91IGZpbmQgdGVuIHllYXJzIGhhdmUgZ290IGJlaGluZCB5b3VcclxuTm8gb25lIHRvbGQgeW91IHdoZW4gdG8gcnVuLCB5b3UgbWlzc2VkIHRoZSBzdGFydGluZyBndW5cclxuXHJcbkFuZCB5b3UgcnVuIGFuZCB5b3UgcnVuIHRvIGNhdGNoIHVwIHdpdGggdGhlIHN1biwgYnV0IGl0J3Mgc2lua2luZ1xyXG5SYWNpbmcgYXJvdW5kIHRvIGNvbWUgdXAgYmVoaW5kIHlvdSBhZ2FpblxyXG5UaGUgc3VuIGlzIHRoZSBzYW1lIGluIGEgcmVsYXRpdmUgd2F5LCBidXQgeW91J3JlIG9sZGVyXHJcblNob3J0ZXIgb2YgYnJlYXRoIGFuZCBvbmUgZGF5IGNsb3NlciB0byBkZWF0aFxyXG5cclxuRXZlcnkgeWVhciBpcyBnZXR0aW5nIHNob3J0ZXIsIG5ldmVyIHNlZW0gdG8gZmluZCB0aGUgdGltZVxyXG5QbGFucyB0aGF0IGVpdGhlciBjb21lIHRvIG5hdWdodCBvciBoYWxmIGEgcGFnZSBvZiBzY3JpYmJsZWQgbGluZXNcclxuSGFuZ2luZyBvbiBxdWlldCBkZXNwZXJhdGlvbiBpcyB0aGUgRW5nbGlzaCB3YXlcclxuVGhlIHRpbWUgaXMgZ29uZSwgdGhlIHNvbmcgaXMgb3ZlciwgdGhvdWdodCBJJ2Qgc29tZXRoaW5nIG1vcmUgdG8gc2F5XHJcblxyXG5CUkVBVEhFIFJFUFJJU0VcclxuSG9tZSwgaG9tZSBhZ2FpblxyXG5JIGxpa2UgdG8gYmUgaGVyZSB3aGVuIEkgY2FuXHJcbkFuZCB3aGVuIEkgY29tZSBob21lIGNvbGQgYW5kIHRpcmVkXHJcbkl0J3MgZ29vZCB0byB3YXJtIG15IGJvbmVzIGJlc2lkZSB0aGUgZmlyZVxyXG5GYXIgYXdheSBhY3Jvc3MgdGhlIGZpZWxkXHJcblRoZSB0b2xsaW5nIG9mIHRoZSBpcm9uIGJlbGxcclxuQ2FsbHMgdGhlIGZhaXRoZnVsIHRvIHRoZWlyIGtuZWVzXHJcblRvIGhlYXIgdGhlIHNvZnRseSBzcG9rZW4gbWFnaWMgc3BlbGxzLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3JMM0Fna3diWWdvL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvckwzQWdrd2JZZ28vbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvckwzQWdrd2JZZ28vaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiA2LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJyTDNBZ2t3YllnbyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJyTDNBZ2t3YllnbyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxMC0xMi0wMlQxNzo1NTo0NVoiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIlI1Z2NnVTNfYm9ZTURGVGJxZVliQ0p6cS1KMCIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NUVNRUV3UlVZNU0wUkRSVFUzTkRKQyIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTAzLTMwVDIxOjE3OjI1WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gQ29tZm9ydGFibHkgbnVtYiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlBpbmsgRmxveWQgLSBDb21mb3J0YWJseSBudW1iXG5cbkl0J3Mgb2J2aW91c2x5IG5vdCBteSBzb25nICwgc28gaSBhbSBub3QgZ29pbmcgdG8gdGFrZSBhbnkgY3JlZHMgZm9yIGl0IC4uXG5cbkkga25vdyB0aGUgc29uZyBpc24ndCBmcm9tIHRoZSBkYXJrIHNpZGUgb2YgdGhlIG1vb24uXG5JIGNob3NlIHRoaXMgcGljdHVyZSBiZWN1YXNlIEkgdGhpbmsgaXQncyB0aGUgbW9zdCByZXByZXNlbnRhdGl2ZSBhbmQgcmVjb2duaXplZCBzeW1ib2wgb2YgUGluayBGbG95ZC5cblxucmFuZ2Ugb2YgaXNoIGlzaHliYWRib3lcbnJ1bmVzY2FwZSBicyBiaCBwa2luZyBib3VudHkgaHVudGVyIHBraW5nIGJvdW50eWh1bnRlciBicyBiaCBycyBydW5lc2NhcGUgamFnZXggbHRkIHVwbG9hZCB2aWRlb3MgcCBoYXQgcHVycGxlIGhhdCBjbGFuIHB1cnBsZSBoYXRzIGJoIGNsYW5zIHJ1bmVzY2FwZSBkaSBycyBlbHZlbWFnZSBraWRzIHJhbnFlIGxvcmQgbWFrdXAgbG9yZCBtYWtldXAgbG9yZCBtYWtlIHVwIGxvcmQgbWFrIHVwXG5zb3ogb3duZWQgZGVmaWwzZCBlbGYgbWFnZSBwa2EgaSBheXplZSBpIGpvc2hpbmF0b3I0OCBlYXp5IGUzNjkgcnVuZXNjYXBlIHJzIHJzIGkgYXl6ZWUgaSB3aWxkeSBvd25zMSBzcGFuam9sIDkxXG5ycyBlbHZld2F0Zm9yZFxucnVuZXNjYXBlIHBraW5nIHAycCBmMnAgbWVtYmVyIGJoIGJvdW50eSBodW50ZXIgdGVhbSBjYXBlIHJzIGphZ2V4IHJhbmdlIG9mIGlzaCBwayB2aWQgMTQgMTMgMTIgMTEgMTAgOSA4IDcgNiA1IDQgMyAyIDEgMCAyMCAyMSAyMiAyMyAyNCAyNSAxNiAxNyAyMCAxOCAxOSBqYWdleCBycyA5OSA5OCA5NyA5NiA5NSA5NCA5MyA5MiA5MSA5MCA4NSA3MCBtYWdpYyBtYWdlIHN0ciBzdHJlbmd0aCByYW5naW5nIHJhbmdlIG1hZ2ljIGhwIGhpdHBvaW50cyBqb3NoIHJzIG1heCBhbmRyZXcgZ29uZXIgcnVuZSB3aWxkeW93bnMxIHR1cGFjIGlnbm9yZSB0aGlzIHJzIGRpcyBqYWdleCBzb25ncyBtdXNpYyByb2NrIHJhcCBoaXBob3AgYnMgYmggYm91bnR5IGh1bnRlciBwa2luZyBiaCBwa2luZyBydW5lc2NhcGUgd2lsZCBnb25lIHdpbGR5IGdvbmUgbmV2ZXIgY29taW5nIGJhY2sgamFnZXggZHVlbGluZyB2aWRcbnJhbmdlIG9mIGlzaCBkdWVsaW5nIHZpZCBpIHZtc2VyIGkgaSBheXplZSBpIGRlZmlsM2Qga2lkcyByYW5xZSBlbHZlbWFnZSBpIGthc295IGkgZnV6enkwMDIwMDUgemV6aW1hIHVsb3ZlbWUgdGhlIG9sZCBuaXRlIDQ1IDQ2IHBhc3NlZCBhd2F5IGRpZWQgcnVuZXNjYXBlIGNhbmNlciBqYWdleCB2aWV3cyBjb21tZW50cyBzdWJzcmliZSBjb3ZlbnRyeSB1ayBlbmdsYW5kIG1zbiBqYWdleCB1c2EgYW1lcmNpYSBwayB2aWQgYm91bnR5IGh1bnRlciByYW5nZSBvZiBpc2ggcGsgdmlkIDEzIGJvdW50eSBodW50ZXIgcGtpbmcgdmlkIHJzIGphZ2V4IHAycCBtYWdpYyBmMnAgcDJwIHplemltYSBrZGlzIHJhbnFlIHNveiBvd25lZCBpc2h5YmFkYm95IGlzaHliYWRib3kgcmFuZ2Ugb2YgaXNoIGRhcmsgYm93IGJoIGJzIG5vdCBib3VudHkgaHVudGVyIHJzIDEgZGVmIGRlZmVuY2UgMSBibG9vZGhvdW4zNCBibG9vZGhvdW4gcnVuZXNjYXBlIHBhcnR5IGhhdCBzY2FtIGhhY2tzIHJ1bmVzY2FwZSBib3VudHkgaHVudGVyIHBrIHBrZWQgbWVtYmVyIGRkcyBzcGVjIGFybWFkeWwgZ29kc3dvcmQgYmFuZG9zIGdvZHN3b3JkIHBrIGljZSBiYXJyYWdlIGFuY2llbnQgbWFnZVxucHVyZSBtZWRpdW0gbG93IGhpZ2ggY3JhdGVyIGFncyBiZ3Mgc2dzIHpncyBzcGVjaWFsIHZlbmdlYW5jZSBwa2luZyB3aXRoIGFncyBhZ3MgcGtlZCBkY2hhaW4gZGJvdyB0YXN0ZSB2ZW5nZWFuY2UgbHVuYXIgaWNlXG5ydW5lc2NhcGUgYnMgYmggcGtpbmcgYm91bnR5IGh1bnRlciBwa2luZyBib3VudHlodW50ZXIgYnMgYmggcnMgcnVuZXNjYXBlIGphZ2V4IGx0ZCB1cGxvYWQgdmlkZW9zIHAgaGF0IHB1cnBsZSBoYXQgY2xhbiBwdXJwbGUgaGF0cyBiaCBjbGFucyBydW5lc2NhcGUgZGkgcnMgZWx2ZW1hZ2Uga2lkcyByYW5xZVxuc296IG93bmVkIGRlZmlsM2QgZWxmIG1hZ2UgcGthIGkgYXl6ZWUgaSBqb3NoaW5hdG9yNDggZWF6eSBlMzY5IHJ1bmVzY2FwZSBycyBycyBpIGF5emVlIGkgd2lsZHkgb3duczEgc3BhbmpvbCA5MVxucnMgZWx2ZXdhdGZvcmRcbnJ1bmVzY2FwZSBwa2luZyBwMnAgZjJwIG1lbWJlciBiaCBib3VudHkgaHVudGVyIHRlYW0gY2FwZSBycyBqYWdleCByYW5nZSBvZiBpc2ggcGsgdmlkIDE0IDEzIDEyIDExIDEwIDkgOCA3IDYgNSA0IDMgMiAxIDAgMjAgMjEgMjIgMjMgMjQgMjUgMTYgMTcgMjAgMTggMTkgamFnZXggcnMgOTkgOTggOTcgOTYgOTUgOTQgOTMgOTIgOTEgOTAgODUgNzAgbWFnaWMgbWFnZSBzdHIgc3RyZW5ndGggcmFuZ2luZyByYW5nZSBtYWdpYyBocCBoaXRwb2ludHMgam9zaCBycyBtYXggYW5kcmV3IGdvbmVyIHJ1bmUgd2lsZHlvd25zMSB0dXBhYyBpZ25vcmUgdGhpcyBycyBkaXMgamFnZXggc29uZ3MgbXVzaWMgcm9jayByYXAgaGlwaG9wIGJzIGJoIGJvdW50eSBodW50ZXIgcGtpbmcgYmggcGtpbmcgcnVuZXNjYXBlIHdpbGQgZ29uZSB3aWxkeSBnb25lIG5ldmVyIGNvbWluZyBiYWNrIGphZ2V4IGR1ZWxpbmcgdmlkXG5yYW5nZSBvZiBpc2ggZHVlbGluZyB2aWQgaSB2bXNlciBpIGkgYXl6ZWUgaSBkZWZpbDNkIGtpZHMgcmFucWUgZWx2ZW1hZ2UgaSBrYXNveSBpIGZ1enp5MDAyMDA1IHplemltYSB1bG92ZW1lIHRoZSBvbGQgbml0ZSA0NSA0NiBwYXNzZWQgYXdheSBkaWVkIHJ1bmVzY2FwZSBjYW5jZXIgamFnZXggdmlld3MgY29tbWVudHMgc3Vic3JpYmUgY292ZW50cnkgdWsgZW5nbGFuZCBtc24gamFnZXggdXNhIGFtZXJjaWEgcGsgdmlkIGJvdW50eSBodW50ZXIgcmFuZ2Ugb2YgaXNoIHBrIHZpZCAxMyBib3VudHkgaHVudGVyIHBraW5nIHZpZCBycyBqYWdleCBwMnAgbWFnaWMgZjJwIHAycCB6ZXppbWEga2RpcyByYW5xZSBzb3ogb3duZWQgaXNoeWJhZGJveSBpc2h5YmFkYm95IHJhbmdlIG9mIGlzaCBkYXJrIGJvdyBiaCBicyBub3QgYm91bnR5IGh1bnRlciBycyAxIGRlZiBkZWZlbmNlIDEgYmxvb2Rob3VuMzQgYmxvb2Rob3VuIHJpZiB0aW55IHB1cGV0IGVsdmVtYWdlIGVsdmVtYWdlIGVsdmVtYWdlIHBrIHZpZCAxIE5lcmN5Y2hsaWRhZSBlbHZlbWFnZSBFbHZld2F0Zm9yZCBvbiB5b3V0dWJlIGlzIGVsdmVtYWdlIGFuZCBoaXMgcnVuZXNjYXBlIG5hbWUgV29sZmV4MTYhS0lEUyBSQU5RRSBQVVJQTEUgMFdOWiBaRVpJTUEgTjBWQUxZRkUgUEhBVCBMVVJFIE9XTkFHRSBSVU5FU0NBUEUgV0lMRFkgV0lMREVSTkVTUyBFTFZFTUFHRSBFTFZFTUFHRSBSVU5FU0NBUEUgUEtJTkcgUlVOMyA0UlIwV1BLIE9XTkFHRSBNQUlLRUwgUFJPIEkgTUFIQVRNQSBJIEVWTyBCTE9PREhPVU4zNCBLSURTIFJBTlFFIEtSQVpZRkFLRU4gUlVORVNDQVBFIFBLRVIgUlVORVNDQVBFIFBLSU5HIElOVElBVEUgUFVSRSA5OSBTVFIgTUFHRSBSQU5HRSBPQkJZIE1BVUwgV0lDS0VEIE1BVUwgRklSRSBDQVBFIFAwME5BR0UgSSBLQVNPWSBJIEVMRiBNQUdFIFBLQSBPQkJZIE1BVUwgTUFVTEVSIEVER0VWSUxMRSBQT09OQUdFa2lkcyByYW5xZSBlbHZlbWFnZSBwdXJwbGUgMHdueiBibG9vZGhvdW4zNCBydW5lc2NhcGUgcGtpbmcgd2lsZCBwa2VyIG93bmFnZSB6ZXppbWEgcGhhdCBsdXJlIEtJRFMgUkFOUUUgUFVSUExFIDBXTlogWkVaSU1BIE4wVkFMWUZFIFBIQVQgTFVSRSBPV05BR0UgUlVORVNDQVBFIFdJTERZIFdJTERFUk5FU1MgRUxWRU1BR0UgRUxWRU1BR0UgUlVORVNDQVBFIFBLSU5HIFJVTjMgNFJSMFdQSyBPV05BR0UgTUFJS0VMIFBSTyBJIE1BSEFUTUEgSSBFVk8gQkxPT0RIT1VOMzQgS0lEUyBSQU5RRSBLUkFaWUZBS0VOIFJVTkVTQ0FQRSBQS0VSIFJVTkVTQ0FQRSBQS0lORyBJTlRJQVRFIFBVUkUgT1dOQUdFIExVUkUgUEhBVCA5OSAxMzM3IFBXTkFHRSBQS0lORyBQS0VSUyBQSyBQQVJUWUhBVCBaRVpJTUEgTjBWQUxZRkUgUlVORVNDQVBFIFdJTERZIEJBUlJBR0UgQU5DSUVOVFMgTFVSSU5HIEZST1NUWURBUEtFUiBKRVRDSElNUCBCTE9PRCBTRUFTT04gQkxPT0RIT1VOMzQgSSBNYWhhdG1hIEksIFN0b25lY29sZHBrcixQMGtlIE4gRGllMiwgU291cnBhdGNoazFkLCBLcmF6eWZha2VuLCBLaWRzIFJhbnFlICxcbjEgUHVyZSBEZXZpbCwgRXZpbHNleGMsIERpenp5IE1hdWxlciwgSSBTaG9ub21lcmN5LCBFNHQgRjBvZCBOdWIsIEltIEVhc3kgWHAsIEltaW5zYW4zLCBQdXJlIGluc2FuMywgYW5kIFhveG9mdXJ5eG94by5cbndoaXBwZXIgd2hpcCBlbHZlbWFnZSBzdjNyaWdlXG5ibG9vZGhvdW4zNCBoaWVpIHRoZSBwayBsZXhtYXJrNzhcbjZ0aCBvdXRsYXcgaSBtZWxlZWQgaSB1bHRpbWF0ZSBzdHJlbmd0aCBoeWJyaWQgYmFycmFnZSBibGl0eiBidXJzdCA5OSByYW5nZSBtYWdlIGtyYXp5ZmFrZW4gZmlubmFsZCBwYXJ0eSBoYXQgcGhhdCBzZXQgcmljaCBzdGFrZXIgYmVzdCBydW5lc2NhcGVyIHJ1bmVzY2FwZSAxMDBtIDEwMEIgMWIgOTkgbWFnaWMgcGFydHkgYmVzdCBkcm9wIHBhcnR5IDk5IHJhbmdlIDk5IHN0ciA5OSBkZWYgOTkgYXRhY2sgVEFOS0VSIHBrIHZpZCBwdXJwbGUgcC1oYXQgeWVsbG93IHAtaGF0IGdyZWVuIGJsdWUgcC1oYXQgd2hpdGUgcC1oYXQgYmFubmVkIHJ1bmVzY2FwZSBhY291bnQgcGVybWFudGx5IGJhbm5lZCBiYWNrIGxhc3QgY2hhbnMgYXBwZWFsIGRlY2xpbmVkIDk5IHN1bW1vbmluZyBzdGVlbCB0aXRhbiBvYnNpZGlhbiBnb2xlbSB0aXRhbnMgbGF2YSB0aXRhbiB3YXIgaGVub2sgYWNoaWRvIG5pZ2h0d2lzaCBieWUgYmVhdXRpZnVsIHJvY2sgaGFyZHJvY2sgaGFyZCBoYXJkc3R5bGUganVtcHN0eWxlIHJuYiBob3AgcmFwIGhpcCBjYWxsZSBrcmlzdGlhbm5zb24gaWRvbCAyMDA5IHN3ZWRpc2ggcG9wIFxuSSB3aWxsIHByb2JhYmx5IG5vdCB1cGxvYWQgYW55IG1vcmUgc29uZ3Mgc28gZG9udCBzdWJzY3JpYmUuIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvX0ZyT1FDLXpFb2cvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9fRnJPUUMtekVvZy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9fRnJPUUMtekVvZy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvX0ZyT1FDLXpFb2cvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiA3LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJfRnJPUUMtekVvZyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJfRnJPUUMtekVvZyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAwOS0xMC0wNlQxNTo1NjowNloiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIks2aENrcFlfV251ZTJySk10bVJuak5FVlFXUSIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NDVPRFJETlRnMFFqQTROa0ZCTmtReSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTAzLTMwVDIxOjE3OjM5WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gVXMgYW5kIFRoZW0iLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJVcyBhbmQgVGhlbVxyXG5BbmQgYWZ0ZXIgYWxsIHdlJ3JlIG9ubHkgb3JkaW5hcnkgbWVuXHJcbk1lLCBhbmQgeW91XHJcbkdvZCBvbmx5IGtub3dzIGl0J3Mgbm90IHdoYXQgd2Ugd291bGQgY2hvb3NlIHRvIGRvXHJcbkZvcndhcmQgaGUgY3JpZWQgZnJvbSB0aGUgcmVhclxyXG5hbmQgdGhlIGZyb250IHJhbmsgZGllZFxyXG5BbmQgdGhlIEdlbmVyYWwgc2F0LCBhcyB0aGUgbGluZXMgb24gdGhlIG1hcFxyXG5tb3ZlZCBmcm9tIHNpZGUgdG8gc2lkZVxyXG5CbGFjayBhbmQgQmx1ZVxyXG5BbmQgd2hvIGtub3dzIHdoaWNoIGlzIHdoaWNoIGFuZCB3aG8gaXMgd2hvXHJcblVwIGFuZCBEb3duXHJcbkFuZCBpbiB0aGUgZW5kIGl0J3Mgb25seSByb3VuZCBhbmQgcm91bmQgYW5kIHJvdW5kXHJcbkhhdmVuJ3QgeW91IGhlYXJkIGl0J3MgYSBiYXR0bGUgb2Ygd29yZHNcclxudGhlIHBvc3RlciBiZWFyZXIgY3JpZWRcclxuTGlzdGVuIHNvbiwgc2FpZCB0aGUgbWFuIHdpdGggdGhlIGd1blxyXG5UaGVyZSdzIHJvb20gZm9yIHlvdSBpbnNpZGVcclxuRG93biBhbmQgT3V0XHJcbkl0IGNhbid0IGJlIGhlbHBlZCBidXQgdGhlcmUncyBhIGxvdCBvZiBpdCBhYm91dFxyXG5XaXRoLCB3aXRob3V0XHJcbkFuZCB3aG8nbGwgZGVueSB0aGF0J3Mgd2hhdCB0aGUgZmlnaHRpbmdzIGFsbCBhYm91dFxyXG5HZXQgb3V0IG9mIHRoZSB3YXksIGl0J3MgYSBidXN5IGRheVxyXG5BbmQgSSd2ZSBnb3QgdGhpbmdzIG9uIG15IG1pbmRcclxuRm9yIHdhbnQgb2YgdGhlIHByaWNlIG9mIHRlYSBhbmQgYSBzbGljZVxyXG5UaGUgb2xkIG1hbiBkaWVkIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbkRiZXFqLTFYT28vZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9uRGJlcWotMVhPby9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9uRGJlcWotMVhPby9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDgsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIm5EYmVxai0xWE9vIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIm5EYmVxai0xWE9vIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDA4LTA5LTIwVDE3OjUyOjUwWiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiMzhCbkVlNFBCNC1FNVZvTFpGVHpHXzVDQTVvIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0ek1EZzVNa1E1TUVWRE1FTTFOVGcyIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjE6MTc6NDhaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBCcmVhdGhlIChJbiBUaGUgQWlyKSAoRXh0ZW5kZWQpIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiSSBkb24ndCBvd24gdGhlIG9yaWdpbmFsIHNvbmcsIEkgb25seSBleHRlbmRlZCBpdCBmcm9tIGl0cyBvcmlnaW5hbCBsZW5ndGguIE5vIGNvcHlyaWdodCBpbmZyaW5nZW1lbnQgaW50ZW5kZWQuIE1hZGUgd2l0aCBBdWRhY2l0eSBhbmQgV2luZG93cyBNb3ZpZSBNYWtlci4iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8zbXRPZUlaZlFxby9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNtdE9lSVpmUXFvL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNtdE9lSVpmUXFvL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8zbXRPZUlaZlFxby9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNtdE9lSVpmUXFvL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiA5LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICIzbXRPZUlaZlFxbyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICIzbXRPZUlaZlFxbyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxNS0xMS0wN1QxNzowMzozM1oiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogImd0UGd6THNvM1VZSlE3aEZYWGNQTEoxMU05ZyIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NDFNemsyUVRBeE1Ua3pORGs0TURoRiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTAzLTMwVDIxOjE3OjU3WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gV2lzaCBZb3UgV2VyZSBIZXJlICh3aXRoIGx5cmljcykiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUSEUgTFlSSUNTIEFSRSBIRVJFLCBQRU9QTEUsIFNPIFBMRUFTRSBET04nVCBBU0shIFxuR3V5cywgSSBrbm93IHRoaXMgaXNuJ3QgdGhlIG9yaWdpbmFsIGFsYnVtIGNvdmVyLCBidXQgSSB0aGluayBpdCdzIGFuIGFtYXppbmcgcGljdHVyZSwgYW5kIEkgYmVsaWV2ZSBpdCByZXByZXNlbnRzIFBpbmsgRmxveWQncyBsZWdhY3kgYW5kIHN1Y2Nlc3MgdGhyb3VnaG91dCB0aGVzZSB5ZWFycy5cblxuVGhpcyBzb25nIHdhcyBwb3N0ZWQgYXMgYSB0cmlidXRlIHRvIFN5ZCBCYXJyZXR0LlxuXG5Tbywgc28geW91IHRoaW5rIHlvdSBjYW4gdGVsbFxuSGVhdmVuIGZyb20gSGVsbCxcbkJsdWUgc2t5cyBmcm9tIHBhaW4uXG5DYW4geW91IHRlbGwgYSBncmVlbiBmaWVsZFxuRnJvbSBhIGNvbGQgc3RlZWwgcmFpbD9cbkEgc21pbGUgZnJvbSBhIHZlaWw/XG5EbyB5b3UgdGhpbmsgeW91IGNhbiB0ZWxsP1xuXG5BbmQgZGlkIHRoZXkgZ2V0IHlvdSB0byB0cmFkZVxuWW91ciBoZXJvcyBmb3IgZ2hvc3RzP1xuSG90IGFzaGVzIGZvciB0cmVlcz9cbkhvdCBhaXIgZm9yIGEgY29vbCBicmVlemU/XG5Db2xkIGNvbWZvcnQgZm9yIGNoYW5nZT9cbkFuZCBkaWQgeW91IGV4Y2hhbmdlXG5BIHdhbGsgb24gcGFydCBpbiB0aGUgd2FyXG5Gb3IgYSBsZWFkIHJvbGUgaW4gYSBjYWdlP1xuXG5Ib3cgSSB3aXNoLCBob3cgSSB3aXNoIHlvdSB3ZXJlIGhlcmUuXG5XZSdyZSBqdXN0IHR3byBsb3N0IHNvdWxzXG5Td2ltbWluZyBpbiBhIGZpc2ggYm93bCxcblllYXIgYWZ0ZXIgeWVhcixcblJ1bm5pbmcgb3ZlciB0aGUgc2FtZSBvbGQgZ3JvdW5kLlxuV2hhdCBoYXZlIHdlIGZvdW5kP1xuVGhlIHNhbWUgb2xkIGZlYXJzLlxuV2lzaCB5b3Ugd2VyZSBoZXJlLlxuX19fX19fX19fX19fX19fX19fX19fX19fX19cblxuXG5JIGRvICBub3Qgb3duIGFueXRoaW5nLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0RQTF9TVjNuN0lVL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRFBMX1NWM243SVUvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRFBMX1NWM243SVUvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAxMCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiRFBMX1NWM243SVUiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiRFBMX1NWM243SVUiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTAtMTItMjRUMTE6NTU6NDhaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICIxd3NIZUV0WjhmR2pRVjBDNUNIQnEwY09TSjQiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTVFUVVFMU5URkRSamN3TURnME5FTXoiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToxODoxMloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIFdlbGNvbWUgVG8gVGhlIE1hY2hpbmUiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJcIldlbGNvbWUgdG8gdGhlIE1hY2hpbmVcIiBpcyB0aGUgc2Vjb25kIHNvbmcgb24gUGluayBGbG95ZCdzIDE5NzUgYWxidW0gV2lzaCBZb3UgV2VyZSBIZXJlLiBJdCBpcyBub3RhYmxlIGZvciBpdHMgdXNlIG9mIGhlYXZpbHkgcHJvY2Vzc2VkIHN5bnRoZXNpemVycyBhbmQgZ3VpdGFycywgYXMgd2VsbCBhcyBhIHdpZGUgYW5kIHZhcmllZCByYW5nZSBvZiB0YXBlIGVmZmVjdHMuIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbHQtdWRnOXpRU0UvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9sdC11ZGc5elFTRS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9sdC11ZGc5elFTRS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbHQtdWRnOXpRU0Uvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAxMSwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAibHQtdWRnOXpRU0UiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAibHQtdWRnOXpRU0UiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTItMDMtMDJUMTY6MTc6MTZaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJvbkZVb0kteEhYQUV4RC1aeW1zV1RXZXJaV28iLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQxUVRZMVEwVXhNVFZDT0Rjek5UaEUiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToxODoyOVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIExlYXJuaW5nIFRvIEZseSAoT2ZmaWNpYWwgTXVzaWMgVmlkZW8gSEQpIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiTm93IGF2YWlsYWJsZSBpbiBIRCB0aGlzIG5ldyB2ZXJzaW9uIHdhcyBzcGVjaWFsbHkgcmUtc2Nhbm5lZCBhbmQgcmVzdG9yZWQgZm9yIGluY2x1c2lvbiBpbiB0aGUgTGF0ZXIgWWVhcnMgYm94IHNldC4gVGhlIG9mZmljaWFsIHByb21vIHZpZGVvIGZvciAnTGVhcm5pbmcgVG8gRmx5JyBieSBQaW5rIEZsb3lkLCB0YWtlbiBmcm9tIHRoZSBhbGJ1bSAnQSBNb21lbnRhcnkgTGFwc2UgT2YgUmVhc29uJy5cblxuT3V0IG5vdzogUGluayBGbG95ZCdzICdUaGUgTGF0ZXIgWWVhcnMnIGJveCBzZXQgaHR0cHM6Ly9waW5rZmxveWQubG5rLnRvL1RoZUxhdGVyWWVhcnNcclxuXG5USEUgTEFURVIgWUVBUlNcclxuSW5jbHVkZWQgb24g4oCYVGhlIExhdGVyIFllYXJz4oCZLCBhIDE4LWRpc2MgYm94IHNldCAoNXhDRHMsIDZ4Qmx1LVJheXMsIDV4RFZEcywyeDfigJ0pIGNvdmVyaW5nIHRoZSBtYXRlcmlhbCBjcmVhdGVkIGJ5IERhdmlkIEdpbG1vdXIsIE5pY2sgTWFzb24gYW5kIFJpY2hhcmQgV3JpZ2h0IGZyb20gMTk4NyBvbndhcmRzLCB3aXRoIHVucmVsZWFzZWQgYXVkaW8gYW5kIGF1ZGlvdmlzdWFsIG1hdGVyaWFsLCBpbmNsdWRpbmcgdGhlIDE5ODkgVmVuaWNlIGFuZCAxOTkwIEtuZWJ3b3J0aCBjb25jZXJ0cywgYXMgd2VsbCBhcyB1cGRhdGVkLCByZXN0b3JlZCBhbmQgcmVtaXhlZCBhdWRpbyBhbmQgdmlkZW8sIDIgeCA34oCdIHNpbmdsZXMsIDYwLXBhZ2UgaGFyZGJhY2sgUGhvdG8gQm9vaywgNDAtcGFnZSBoYXJkYmFjayBDcmVkaXRzIEJvb2ssIEx5cmljcyBCb29rLCAzIHggcmVwcm9kdWN0aW9uIHRvdXIgcHJvZ3JhbW1lcywgY2FyZCBlbnZlbG9wZSBjb250YWluaW5nIGNvbGxlY3RpYmxlIG1lbW9yYWJpbGlhLCBwbHVzIEJsdS1yYXlzIGFuZCBEVkRzIGluIGluZGl2aWR1YWwgd2FsbGV0cy5cclxuXHJcbkFsc28gYXZhaWxhYmxlOiAxMi10cmFjayDigJhIaWdobGlnaHRz4oCZIHBhY2thZ2UgKDItTFAgb3IgMS1DRCkgaHR0cHM6Ly9waW5rZmxveWQubG5rLnRvL1RoZUxhdGVyWWVhcnNcclxuXHJcblBJTksgRkxPWUQgU09DSUFMIE1FRElBXHJcbkZhY2Vib29rIGh0dHA6Ly9zbWFydHVybC5pdC9QRl9GQlxyXG5Ud2l0dGVyIGh0dHA6Ly9zbWFydHVybC5pdC9QRl9Ud2l0dGVyXHJcbkluc3RhZ3JhbSBodHRwOi8vc21hcnR1cmwuaXQvUEZfSW5zdGFncmFtXHJcblNwb3RpZnkgaHR0cDovL3NtYXJ0dXJsLml0L1BGX1Nwb3RpZnlcclxuWW91VHViZSBodHRwOi8vc21hcnR1cmwuaXQvUEZfWVRcclxuQXBwbGUgaHR0cDovL3NtYXJ0dXJsLml0L1BGX0FwcGxlXG5cbiNQaW5rRmxveWQgI1RoZUxhdGVyWWVhcnMgI1JlbWFzdGVyZWQgI0xhdGVyWWVhcnMgI0FNb21lbnRhcnlMYXBzZU9mUmVhc29uICNBTUxPUiAjTUxPUiAjTW9tZW50YXJ5TGFwc2UiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9uVmhOQ1RIOHBEcy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL25WaE5DVEg4cERzL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL25WaE5DVEg4cERzL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9uVmhOQ1RIOHBEcy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDEyLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJuVmhOQ1RIOHBEcyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJuVmhOQ1RIOHBEcyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxNC0wNy0xOFQxNTo1MjozN1oiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIjBvOUlFbW5saUZSOXlTOW5rRFBreXV6Rk52RSIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NHlNVVF5UVRRek1qUkROek15UVRNeSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTAzLTMwVDIxOjE4OjM4WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJNb25leSAtIFBpbmsgRmxveWQgSEQgKFN0dWRpbyBWZXJzaW9uKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk1vbmV5IC0gUGluayBGbG95ZCBmcm9tIHRoZSBEYXJrIFNpZGUgb2YgdGhlIG1vb24gaW4gSEQgcXVhbGl0eVxuXG5bTHlyaWNzXVxuTW9uZXlcbkdldCBhd2F5XG5Zb3UgZ2V0IGEgZ29vZCBqb2Igd2l0aCBnb29kIHBheSBhbmQgeW91J3JlIG9rYXlcbk1vbmV5XG5JdCdzIGEgZ2FzXG5HcmFiIHRoYXQgY2FzaCB3aXRoIGJvdGggaGFuZHMgYW5kIG1ha2UgYSBzdGFzaFxuTmV3IGNhciwgY2F2aWFyLCBmb3VyIHN0YXIgZGF5ZHJlYW1cblRoaW5rIEknbGwgYnV5IG1lIGEgZm9vdGJhbGwgdGVhbVxuXG5Nb25leVxuV2VsbCwgZ2V0IGJhY2tcbkknbSBhbGwgcmlnaHQgSmFja1xuS2VlcCB5b3VyIGhhbmRzIG9mZiBvZiBteSBzdGFja1xuTW9uZXlcbkl0J3MgYSBoaXRcbkRvbid0IGdpdmUgbWUgdGhhdCBkbyBnb29keSBnb29kIGJ1bGxzaGl0XG5JJ20gaW4gdGhlIGhpZ2gtZmlkZWxpdHkgZmlyc3QgY2xhc3MgdHJhdmVsbGluZyBzZXRcbkkgdGhpbmsgSSBuZWVkIGEgTGVhciBqZXRcblxuKGFtYXppbmcgc29sb3MpXG5cbk1vbmV5XG5JdCdzIGEgY3JpbWVcblNoYXJlIGl0IGZhaXJseVxuQnV0IGRvbid0IHRha2UgYSBzbGljZSBvZiBteSBwaWVcbk1vbmV5XG5TbyB0aGV5IHNheVxuSXMgdGhlIHJvb3Qgb2YgYWxsIGV2aWwgdG9kYXlcbkJ1dCBpZiB5b3UgYXNrIGZvciBhIHJhaXNlXG5JdCdzIG5vIHN1cnByaXNlIHRoYXQgdGhleSdyZSBnaXZpbmcgbm9uZSBhd2F5XG5cblwiSHVIdWghIEkgd2FzIGluIHRoZSByaWdodCFcIlxuXCJZZXMsIGFic29sdXRlbHkgaW4gdGhlIHJpZ2h0IVwiXG5cIkkgY2VydGFpbmx5IHdhcyBpbiB0aGUgcmlnaHQhXCJcblwiWW91IHdhcyBkZWZpbml0ZWx5IGluIHRoZSByaWdodC4gVGhhdCBnZWV6ZXIgd2FzIGNydWlzaW5nIGZvciBhIGJydWlzaW5nIVwiXG5cIlllYWghXCJcblwiV2h5IGRvZXMgYW55b25lIGRvIGFueXRoaW5nP1wiXG5cIkkgZG9uJ3Qga25vdywgSSB3YXMgcmVhbGx5IGRydW5rIGF0IHRoZSB0aW1lIVwiXG5cIkkgd2FzIGp1c3QgdGVsbGluZyBoaW0sIGhlIGNvdWxkbid0IGdldCBpbnRvIG51bWJlciAyLiBIZSB3YXMgYXNraW5nIHdoeSBoZSB3YXNuJ3QgY29taW5nIHVwIG9uIGZyZWVseSwgYWZ0ZXIgSSB3YXMgeWVsbGluZyBhbmQgc2NyZWFtaW5nIGFuZCB0ZWxsaW5nIGhpbSB3aHkgaGUgd2Fzbid0IGNvbWluZyB1cCBvbiBmcmVlbHkuIEl0IGNhbWUgYXMgYSBoZWF2eSBibG93LCBidXQgd2Ugc29ydGVkIHRoZSBtYXR0ZXIgb3V0XCIiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9jcGJidWFJQTNEcy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2NwYmJ1YUlBM0RzL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2NwYmJ1YUlBM0RzL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9jcGJidWFJQTNEcy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2NwYmJ1YUlBM0RzL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAxMywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiY3BiYnVhSUEzRHMiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiY3BiYnVhSUEzRHMiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMDktMDgtMjBUMjA6NDQ6NTJaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJkVG5DVWJWNFl6bkZ3WTVDNkFfQ0g0dkkyTlEiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQ1UlRneE5EUkJNelV3UmpRME1EaEMiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToxODo1NFoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIEJyZWF0aGUgaW4gdGhlIEFpciAoTG9uZyBWZXJzaW9uKSAvIFRoZSBHcmVhdCBHaWcgaW4gdGhlIFNreSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk15IEZpcnN0IE1lZGxleSwgTGlrZSwgU3Vic2NyaWJlLCBTaG93IHlvdXIgbG92ZSBmb3IgUGluayBGbG95ZCBhbmQgSG9wZSB5b3UnbGwgbGlrZSBpdCAhXG5cbi0gTWFkZSBieSBWaW5jZW50IExlbWF5IiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNkRWdTl2RjVKM1kvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS82RFZ1OXZGNUozWS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS82RFZ1OXZGNUozWS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvNkRWdTl2RjVKM1kvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS82RFZ1OXZGNUozWS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMTQsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIjZEVnU5dkY1SjNZIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIjZEVnU5dkY1SjNZIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDEyLTA4LTE3VDA0OjI3OjQxWiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiNGZpcVE3OF8yUEYzeGdoSExna0xrOTJhbDdVIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk1RU5EVTRRME00UkRFeE56TTFNamN5IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjE6MTk6NDBaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIuKZqyBQaW5rIEZsb3lkIC0gT24gVGhlIFR1cm5pbmcgQXdheSBbTHlyaWNzXSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIi0tLSBJTkZPIC0tLVxyXG5cclxuQWxidW06IEEgTW9tZW50YXJ5IExhcHNlIG9mIFJlYXNvblxyXG5ZZWFyOiAxOTg3XHJcbk11c2ljOiBHaWxtb3VyXHJcblxyXG4tLS0gTFlSSUNTIC0tLVxyXG5cclxuT24gdGhlIHR1cm5pbmcgYXdheVxyXG5Gcm9tIHRoZSBwYWxlIGFuZCBkb3dudHJvZGRlblxyXG5BbmQgdGhlIHdvcmRzIHRoZXkgc2F5XHJcbldoaWNoIHdlIHdvbid0IHVuZGVyc3RhbmRcclxuXCJEb24ndCBhY2NlcHQgdGhhdCB3aGF0J3MgaGFwcGVuaW5nXHJcbklzIGp1c3QgYSBjYXNlIG9mIG90aGVycycgc3VmZmVyaW5nXHJcbk9yIHlvdSdsbCBmaW5kIHRoYXQgeW91J3JlIGpvaW5pbmcgaW5cclxuVGhlIHR1cm5pbmcgYXdheVwiXHJcblxyXG5JdCdzIGEgc2luIHRoYXQgc29tZWhvd1xyXG5MaWdodCBpcyBjaGFuZ2luZyB0byBzaGFkb3dcclxuQW5kIGNhc3RpbmcgaXQncyBzaHJvdWRcclxuT3ZlciBhbGwgd2UgaGF2ZSBrbm93blxyXG5VbmF3YXJlIGhvdyB0aGUgcmFua3MgaGF2ZSBncm93blxyXG5Ecml2ZW4gb24gYnkgYSBoZWFydCBvZiBzdG9uZVxyXG5XZSBjb3VsZCBmaW5kIHRoYXQgd2UncmUgYWxsIGFsb25lXHJcbkluIHRoZSBkcmVhbSBvZiB0aGUgcHJvdWRcclxuXHJcbk9uIHRoZSB3aW5ncyBvZiB0aGUgbmlnaHRcclxuQXMgdGhlIGRheXRpbWUgaXMgc3RpcnJpbmdcclxuV2hlcmUgdGhlIHNwZWVjaGxlc3MgdW5pdGVcclxuSW4gYSBzaWxlbnQgYWNjb3JkXHJcblVzaW5nIHdvcmRzIHlvdSB3aWxsIGZpbmQgYXJlIHN0cmFuZ2VcclxuQW5kIG1lc21lcml6ZWQgYXMgdGhleSBsaWdodCB0aGUgZmxhbWVcclxuRmVlbCB0aGUgbmV3IHdpbmQgb2YgY2hhbmdlXHJcbk9uIHRoZSB3aW5ncyBvZiB0aGUgbmlnaHRcclxuXHJcbk5vIG1vcmUgdHVybmluZyBhd2F5XHJcbkZyb20gdGhlIHdlYWsgYW5kIHRoZSB3ZWFyeVxyXG5ObyBtb3JlIHR1cm5pbmcgYXdheVxyXG5Gcm9tIHRoZSBjb2xkbmVzcyBpbnNpZGVcclxuSnVzdCBhIHdvcmxkIHRoYXQgd2UgYWxsIG11c3Qgc2hhcmVcclxuSXQncyBub3QgZW5vdWdoIGp1c3QgdG8gc3RhbmQgYW5kIHN0YXJlXHJcbklzIGl0IG9ubHkgYSBkcmVhbSB0aGF0IHRoZXJlJ2xsIGJlXHJcbk5vIG1vcmUgdHVybmluZyBhd2F5PyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL29qZjE4d1RfWHRrL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb2pmMTh3VF9YdGsvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb2pmMTh3VF9YdGsvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL29qZjE4d1RfWHRrL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMTUsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIm9qZjE4d1RfWHRrIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIm9qZjE4d1RfWHRrIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDEwLTAzLTA3VDE4OjM0OjIwWiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiMUxUZmk4c01rOU5mYW5zcEtFMDF2Y3pWa3pZIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0eU1EaEJNa05CTmpSRE1qUXhRVGcxIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjE6MTk6NTRaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIkhhdmUgQSBDaWdhciIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlByb3ZpZGVkIHRvIFlvdVR1YmUgYnkgUGluayBGbG95ZFxuXG5IYXZlIEEgQ2lnYXIgwrcgUGluayBGbG95ZFxuXG5XaXNoIFlvdSBXZXJlIEhlcmVcblxu4oSXIFBpbmsgRmxveWQgUmVjb3Jkc1xuXG5SZWxlYXNlZCBvbjogMTk3NS0wOS0xMlxuXG5BdXRvLWdlbmVyYXRlZCBieSBZb3VUdWJlLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3RiZHB2N0dfUFBnL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdGJkcHY3R19QUGcvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdGJkcHY3R19QUGcvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3RiZHB2N0dfUFBnL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdGJkcHY3R19QUGcvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDE2LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJ0YmRwdjdHX1BQZyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJ0YmRwdjdHX1BQZyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxNi0wMS0xMlQxNzo1MDoxNVoiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogInNSSGZtVWVjZGVkckRUcWctNkU4YkpjdUNPTSIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NUdNMFEzTTBNek16WTVOVEpGTlRkRSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTAzLTMwVDIxOjIwOjE0WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJBbnkgQ29sb3VyIFlvdSBMaWtlIC0gUGluayBGbG95ZCBIRCAoU3R1ZGlvIFF1YWxpdHkpIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQW55IENvbG91ciBZb3UgTGlrZSAtIFBpbmsgRmxveWQgZnJvbSB0aGUgYWxidW0gRGFyayBzaWRlIG9mIHRoZSBtb29uIGluIEhEIHF1YWxpdHkiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9iSzdISnZtZ0ZuTS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2JLN0hKdm1nRm5NL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2JLN0hKdm1nRm5NL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9iSzdISnZtZ0ZuTS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2JLN0hKdm1nRm5NL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAxNywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiYks3SEp2bWdGbk0iCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiYks3SEp2bWdGbk0iLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMDktMDgtMjlUMDE6NDE6NTFaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJmX0RRNUN3WTBJOG5wcjRpT29nbnlUTm5NSXMiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTR6UmpNME1rVkNSVGcwTWtZeVFUTTAiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToyMDoyOFoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiS2VlcCBUYWxraW5nIC0gUGluayBGbG95ZCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpdGxlOiBLZWVwIFRhbGtpbmdcblRyYWNrOiAwOVxuQXJ0aXN0OiBQaW5rIEZsb3lkXG5BbGJ1bTogVGhlIERpdmlzaW9uIEJlbGxcblllYXI6IDE5OTQiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ISjd6YnpKWnNqcy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0hKN3piekpac2pzL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0hKN3piekpac2pzL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ISjd6YnpKWnNqcy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDE4LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJISjd6YnpKWnNqcyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJISjd6YnpKWnNqcyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxMy0wOC0yN1QxODoyMjozOVoiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogImxyZEM0WkpTTlJnX3BJYlFDdzhFQmFWMzZURSIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NDVOelV3UWtJMU0wVXhOVGhCTWtVMCIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTAzLTMwVDIxOjIwOjQ0WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJDbHVzdGVyIE9uZSAtIFBpbmsgRmxveWQiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaXRsZTogQ2x1c3RlciBPbmVcblRyYWNrOiAwMVxuQXJ0aXN0OiBQaW5rIEZsb3lkXG5BbGJ1bTogVGhlIERpdmlzaW9uIEJlbGxcblllYXI6IDE5OTQiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS80SExhT21pd1Y1US9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzRITGFPbWl3VjVRL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzRITGFPbWl3VjVRL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS80SExhT21pd1Y1US9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDE5LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICI0SExhT21pd1Y1USIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICI0SExhT21pd1Y1USIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxMy0wOC0yN1QxNzo1NTo0NloiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogImRJRmdxcTVuQU1wNGFVSlpuM1pSa0pTT09PVSIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NUROekUxUmpaRU1VWkNNakEwUkRCQiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTAzLTMwVDIxOjIwOjUyWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gV2hhdCBEbyBZb3UgV2FudCBGcm9tIE1lIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNvbmcgJ1doYXQgRG8gWW91IFdhbnQgRnJvbSBNZScgZnJvbSBQaW5rIEZsb3lkJ3MgJ1RoZSBEaXZpc2lvbiBCZWxsJyBhbGJ1bSAocmVtYXN0ZXJlZCAyMDExIHZlcnNpb24pLlxyXG5cclxuSSBkbyBub3Qgb3duIHRoaXMgc29uZyBhbmQgbm8gcHJvZml0IGlzIGJlaW5nIG1hZGUgb3V0IG9mIHRoaXMgdmlkZW8uIEFsbCBjb250ZW50IG93bmVkIGJ5IEVNSSBhbmQgUGluayBGbG95ZC4iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9BOGk3MjQ4SHFFWS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0E4aTcyNDhIcUVZL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0E4aTcyNDhIcUVZL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9BOGk3MjQ4SHFFWS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0E4aTcyNDhIcUVZL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAyMCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiQThpNzI0OEhxRVkiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiQThpNzI0OEhxRVkiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTItMDEtMDhUMDk6MDk6MDhaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICIxd1FYSGFJOFc5YVNfSmM3TUJiTXBaT09JanciLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQzTVRJMU5ESXdPVE13UWpJeE16TkciLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToyMTowMloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUG9sZXMgQXBhcnQgLSBQaW5rIEZsb3lkIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGl0bGU6IFBvbGVzIEFwYXJ0XG5UcmFjazogMDNcbkFydGlzdDogUGluayBGbG95ZFxuQWxidW06IFRoZSBEaXZpc2lvbiBCZWxsXG5ZZWFyOiAxOTk0IiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRElJWTZKaExiZ3cvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ESUlZNkpoTGJndy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ESUlZNkpoTGJndy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvRElJWTZKaExiZ3cvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAyMSwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiRElJWTZKaExiZ3ciCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiRElJWTZKaExiZ3ciLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTMtMDgtMjdUMTg6MDU6MjZaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJkY3RVdUxuOTlEei1qTUhsRXlLMVZpbW5Tb2MiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTVEUTBNeVEwWTRNemcwTTBWR09FWXciLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToyMToxMVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiTWFyb29uZWQgLSBQaW5rIEZsb3lkIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGl0bGU6IE1hcm9vbmVkXG5UcmFjazogMDRcbkFydGlzdDogUGluayBGbG95ZFxuQWxidW06IFRoZSBEaXZpc2lvbiBCZWxsXG5ZZWFyOiAxOTk0IiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb1JVMTU1cF9QdjAvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9vUlUxNTVwX1B2MC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9vUlUxNTVwX1B2MC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvb1JVMTU1cF9QdjAvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAyMiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAib1JVMTU1cF9QdjAiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAib1JVMTU1cF9QdjAiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTMtMDgtMjdUMTc6NDA6MzFaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJvNnY1bHB1WEZMOXBHWktwdUNYUG5Md0RGWEUiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTR5UVVFMlEwSkVNVGs0TlRNM1JUWkMiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToyMToxOFoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiQSBHcmVhdCBEYXkgZm9yIEZyZWVkb20iLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJcIkEgR3JlYXQgRGF5IGZvciBGcmVlZG9tXCIgaXMgYSBzb25nIGJ5IFBpbmsgRmxveWQgZnJvbSB0aGVpciAxOTk0IGFsYnVtLCBUaGUgRGl2aXNpb24gQmVsbC5cblxuV2hpbGUgb3ZlcnRseSBhbGx1ZGluZyB0byB0aGUgQmVybGluIFdhbGwsIHRoZSBseXJpY3MgYXJlIG9mdGVuIHJlYWQgYXMgYSByZWZsZWN0aW9uIG9uIHRoZSBiaXR0ZXIgYW5kIGVzdHJhbmdlZCBwYXJ0bmVyc2hpcCBEYXZpZCBHaWxtb3VyIGhhZCB3aXRoIGZvcm1lciBiYW5kbWF0ZSBSb2dlciBXYXRlcnMuIEhvd2V2ZXIsIEdpbG1vdXIgcmVqZWN0cyB0aGlzIGlkZWE6IFwiSSdtIHF1aXRlIGhhcHB5IGZvciBwZW9wbGUgdG8gaW50ZXJwcmV0IFtUaGUgRGl2aXNpb24gQmVsbF0gYW55IHdheSB0aGV5IGxpa2UuIEJ1dCBtYXliZSBhIG5vdGUgb2YgY2F1dGlvbiBzaG91bGQgYmUgc291bmRlZCBiZWNhdXNlIHlvdSBjYW4gcmVhZCB0b28gbXVjaCBpbnRvIGl0LiBcIkEgR3JlYXQgRGF5IGZvciBGcmVlZG9tXCIsIGZvciBleGFtcGxlLCBoYXMgZ290IG5vdGhpbmcgdG8gZG8gd2l0aCBSb2dlciBvciBoaXMgJ3dhbGwnLiBJdCBqdXN0IGRvZXNuJ3QuIFdoYXQgZWxzZSBjYW4gSSBzYXk/XCIgWzFdXG5cblRoZSBzb25nIHdhcyBwZXJmb3JtZWQgYnkgR2lsbW91ciBzb2xvIGF0IGNvbmNlcnRzIGluIDIwMDIgYW5kIDIwMDYgYW5kIGZlYXR1cmVzIG9uIGhpcyBsaXZlIGFsYnVtLCBMaXZlIGluIEdkYcWEc2suXG5cbk9uIHRoZSBhbGJ1bSdzIGJvbnVzIERWRCBkb2N1bWVudGFyeSwgR2RhxYRzayBEaWFyeSwgR2lsbW91ciBzdGF0ZXMgdGhhdCB0aGUgc29uZyBpcyBhYm91dCB0aGUgc3RydWdnbGVzIGluIEVhc3Rlcm4gRXVyb3BlIChwYXJ0aWN1bGFybHkgUG9sYW5kIGFuZCBHZXJtYW55KSBhbmQgZGlkIHRoZWlyIFwiZnJlZWRvbVwiIHJlYWxseSBtZWFuIFwiZnJlZWRvbVwiPyBHaWxtb3VyIGFsc28gbWVudGlvbnMgdGhhdCB0aGUgc29uZyB3YXMgb3JpZ2luYWxseSB0aXRsZWQgSW4gU2hhZGVzIG9mIEdyZXkuXG5cbkx5cmljczpcblxuT24gdGhlIGRheSB0aGUgd2FsbCBjYW1lIGRvd25cblRoZXkgdGhyZXcgdGhlIGxvY2tzIG9udG8gdGhlIGdyb3VuZFxuQW5kIHdpdGggZ2xhc3NlcyBoaWdoIHdlIHJhaXNlZCBhIGNyeSBmb3IgZnJlZWRvbSBoYWQgYXJyaXZlZFxuT24gdGhlIGRheSB0aGUgd2FsbCBjYW1lIGRvd25cblRoZSBTaGlwIG9mIEZvb2xzIGhhZCBmaW5hbGx5IHJhbiBhZ3JvdW5kXG5Qcm9taXNlcyBsaXQgdXAgdGhlIG5pZ2h0IGxpa2UgcGFwZXIgZG92ZXMgaW4gZmxpZ2h0XG5cbkkgZHJlYW1lZCB5b3UgaGFkIGxlZnQgbXkgc2lkZVxuTm8gd2FybXRoLCBub3QgZXZlbiBwcmlkZSByZW1haW5lZFxuQW5kIGV2ZW4gdGhvdWdoIHlvdSBuZWVkZWQgbWVcbkl0IHdhcyBjbGVhciB0aGF0IEkgY291bGQgbm90IGRvIGEgdGhpbmcgZm9yIHlvdVxuXG5Ob3cgbGlmZSBkZXZhbHVlcyBkYXkgYnkgZGF5XG5BcyBmcmllbmRzIGFuZCBuZWlnaGJvcnMgdHVybiBhd2F5XG5BbmQgdGhlcmUncyBhIGNoYW5nZSB0aGF0LCBldmVuIHdpdGggcmVncmV0LCBjYW5ub3QgYmUgdW5kb25lXG5Ob3cgZnJvbnRpZXJzIHNoaWZ0IGxpa2UgZGVzZXJ0IHNhbmRzXG5XaGlsZSBuYXRpb25zIHdhc2ggdGhlaXIgYmxvb2RpZWQgaGFuZHNcbk9mIGxveWFsdHksIG9mIGhpc3RvcnksIGluIHNoYWRlcyBvZiBncmV5XG5cbkkgd29rZSB0byB0aGUgc291bmQgb2YgZHJ1bXNcblRoZSBtdXNpYyBwbGF5ZWQsIHRoZSBtb3JuaW5nIHN1biBzdHJlYW1lZCBpblxuSSB0dXJuZWQgYW5kIEkgbG9va2VkIGF0IHlvdVxuQW5kIGFsbCBidXQgdGhlIGJpdHRlciByZXNpZHVlcyBzbGlwcGVkIGF3YXkuLi5zbGlwcGVkIGF3YXkiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9TSHVJX0ZXQ29QVS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NIdUlfRldDb1BVL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1NIdUlfRldDb1BVL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMjMsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIlNIdUlfRldDb1BVIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIlNIdUlfRldDb1BVIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDA5LTEwLTI5VDIzOjA4OjMxWiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAibXF1VEJTb1Q4clN6ZFBNQmRzLThqQjhDeXpjIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk1RE1rVTROVFkxUVVGR1FUWXdNREUzIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjE6MjE6MjhaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlRha2UgSXQgQmFjayAtIFBpbmsgRmxveWQiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUYWtlIEl0IEJhY2sgY2FuY2lvbiBkZWwgVWx0aW1vIEFsYnVtIGRlIGVzdHVkaW8gZGUgZWwgR3J1cG8gQnJpdGFuaWNvIFBpbmsgRmxveWQgbGxhbWFkbyBUaGUgRGl2aXNpb24gQmVsbCBsYW56YWRvIGVuIE1hcnpvIGRlIDE5OTQuIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvaXB2LVJ2cDd1LWMvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9pcHYtUnZwN3UtYy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9pcHYtUnZwN3UtYy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvaXB2LVJ2cDd1LWMvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAyNCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiaXB2LVJ2cDd1LWMiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiaXB2LVJ2cDd1LWMiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTItMTAtMjJUMDI6MTg6MTlaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJQbC05bjR6RHl2bE5YRnI5UFg1ZldTMUl1czQiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQ0TWpjNVJFRkJSVUUyTVRkRlJEVTAiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToyMTo0NVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIENvbWluZyBCYWNrIFRvIExpZmUiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJMeXJpY3M6XHJcblxyXG5XaGVyZSB3ZXJlIHlvdSB3aGVuIEkgd2FzIGJ1cm5lZCBhbmQgYnJva2VuXHJcbldoaWxlIHRoZSBkYXlzIHNsaXBwZWQgYnkgZnJvbSBteSB3aW5kb3cgd2F0Y2hpbmdcclxuQW5kIHdoZXJlIHdlcmUgeW91IHdoZW4gSSB3YXMgaHVydCBhbmQgSSB3YXMgaGVscGxlc3NcclxuQmVjYXVzZSB0aGUgdGhpbmdzIHlvdSBzYXkgYW5kIHRoZSB0aGluZ3MgeW91IGRvIHN1cnJvdW5kIG1lXHJcbldoaWxlIHlvdSB3ZXJlIGhhbmdpbmcgeW91cnNlbGYgb24gc29tZW9uZSBlbHNlJ3Mgd29yZHNcclxuRHlpbmcgdG8gYmVsaWV2ZSBpbiB3aGF0IHlvdSBoZWFyZFxyXG5JIHdhcyBzdGFyaW5nIHN0cmFpZ2h0IGludG8gdGhlIHNoaW5pbmcgc3VuXHJcblxyXG5Mb3N0IGluIHRob3VnaHQgYW5kIGxvc3QgaW4gdGltZVxyXG5XaGlsZSB0aGUgc2VlZHMgb2YgbGlmZSBhbmQgdGhlIHNlZWRzIG9mIGNoYW5nZSB3ZXJlIHBsYW50ZWRcclxuT3V0c2lkZSB0aGUgcmFpbiBmZWxsIGRhcmsgYW5kIHNsb3dcclxuV2hpbGUgSSBwb25kZXJlZCBvbiB0aGlzIGRhbmdlcm91cyBidXQgaXJyZXNpc3RpYmxlIHBhc3RpbWVcclxuXHJcbkkgdG9vayBhIGhlYXZlbmx5IHJpZGUgdGhyb3VnaCBvdXIgc2lsZW5jZVxyXG5JIGtuZXcgdGhlIG1vbWVudCBoYWQgYXJyaXZlZFxyXG5Gb3Iga2lsbGluZyB0aGUgcGFzdCBhbmQgY29taW5nIGJhY2sgdG8gbGlmZVxyXG5cclxuSSB0b29rIGEgaGVhdmVubHkgcmlkZSB0aHJvdWdoIG91ciBzaWxlbmNlXHJcbkkga25ldyB0aGUgd2FpdGluZyBoYWQgYmVndW5cclxuQW5kIEkgaGVhZGVkIHN0cmFpZ2h0Li5pbnRvIHRoZSBzaGluaW5nIHN1biIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3lqb1BXeG1PQ3RjL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveWpvUFd4bU9DdGMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkveWpvUFd4bU9DdGMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAyNSwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAieWpvUFd4bU9DdGMiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAieWpvUFd4bU9DdGMiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMDktMTItMjVUMDk6MzM6MTFaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJUTVRGQjhSYVpBbzNpTUd3a0xCdHhmclpyUjAiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQzTkRoRlJUZ3dPVFJFUlRVNFJqZzMiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wMy0zMFQyMToyMjowN1oiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIExvc3QgRm9yIFdvcmRzIC0gbHlyaWNzIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiUGluayBGbG95ZCAtIExvc3QgZm9yIFdvcmRzIC0gVGhlIERpdmlzaW9uIEJlbGwiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS96UHd1Y0ZhcjlrTS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pQd3VjRmFyOWtNL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pQd3VjRmFyOWtNL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMjYsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogInpQd3VjRmFyOWtNIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogInpQd3VjRmFyOWtNIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDExLTAxLTA5VDAzOjUyOjE3WiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiR1JOdUJqUHE4TmRSc1c4OEtpck40ZjFMWm1BIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0MVFVWkdRVFk1T1RFNFFUUkVRVVU0IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjE6MjI6MThaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIuKZqyBQaW5rIEZsb3lkIC0gSGlnaCBIb3BlcyBbTHlyaWNzXSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIi0tLSBJTkZPIC0tLVxyXG5cclxuQWxidW06IFRoZSBEaXZpc2lvbiBCZWxsXHJcblllYXI6IDE5OTRcclxuTXVzaWM6IEdpbG1vdXJcclxuXHJcbi0tLSBMWVJJQ1MgLS0tXHJcblxyXG5CZXlvbmQgdGhlIGhvcml6b24gb2YgdGhlIHBsYWNlIHdlIGxpdmVkIHdoZW4gd2Ugd2VyZSB5b3VuZ1xyXG5JbiBhIHdvcmxkIG9mIG1hZ25ldHMgYW5kIG1pcmFjbGVzXHJcbk91ciB0aG91Z2h0cyBzdHJheWVkIGNvbnN0YW50bHkgYW5kIHdpdGhvdXQgYm91bmRhcnlcclxuVGhlIHJpbmdpbmcgb2YgdGhlIGRpdmlzaW9uIGJlbGwgaGFkIGJlZ3VuXHJcblxyXG5BbG9uZyB0aGUgTG9uZyBSb2FkIGFuZCBvbiBkb3duIHRoZSBDYXVzZXdheVxyXG5EbyB0aGV5IHN0aWxsIG1lZXQgdGhlcmUgYnkgdGhlIEN1dFxyXG5cclxuVGhlcmUgd2FzIGEgcmFnZ2VkIGJhbmQgdGhhdCBmb2xsb3dlZCBpbiBvdXIgZm9vdHN0ZXBzXHJcblJ1bm5pbmcgYmVmb3JlIHRpbWUgdG9vayBvdXIgZHJlYW1zIGF3YXlcclxuTGVhdmluZyB0aGUgbXlyaWFkIHNtYWxsIGNyZWF0dXJlcyB0cnlpbmcgdG8gdGllIHVzIHRvIHRoZSBncm91bmRcclxuVG8gYSBsaWZlIGNvbnN1bWVkIGJ5IHNsb3cgZGVjYXlcclxuXHJcblRoZSBncmFzcyB3YXMgZ3JlZW5lclxyXG5UaGUgbGlnaHQgd2FzIGJyaWdodGVyXHJcbldpdGggZnJpZW5kcyBzdXJyb3VuZGVkXHJcblRoZSBuaWdodHMgb2Ygd29uZGVyXHJcblxyXG5Mb29raW5nIGJleW9uZCB0aGUgZW1iZXJzIG9mIGJyaWRnZXMgZ2xvd2luZyBiZWhpbmQgdXNcclxuVG8gYSBnbGltcHNlIG9mIGhvdyBncmVlbiBpdCB3YXMgb24gdGhlIG90aGVyIHNpZGVcclxuU3RlcHMgdGFrZW4gZm9yd2FyZHMgYnV0IHNsZWVwd2Fsa2luZyBiYWNrIGFnYWluXHJcbkRyYWdnZWQgYnkgdGhlIGZvcmNlIG9mIHNvbWUgaW5uZXIgdGlkZVxyXG5cclxuQXQgYSBoaWdoZXIgYWx0aXR1ZGUgd2l0aCBmbGFnIHVuZnVybGVkXHJcbldlIHJlYWNoZWQgdGhlIGRpenp5IGhlaWdodHMgb2YgdGhhdCBkcmVhbWVkIG9mIHdvcmxkXHJcblxyXG5FbmN1bWJlcmVkIGZvcmV2ZXIgYnkgZGVzaXJlIGFuZCBhbWJpdGlvblxyXG5UaGVyZSdzIGEgaHVuZ2VyIHN0aWxsIHVuc2F0aXNmaWVkXHJcbk91ciB3ZWFyeSBleWVzIHN0aWxsIHN0cmF5IHRvIHRoZSBob3Jpem9uXHJcblRob3VnaCBkb3duIHRoaXMgcm9hZCB3ZSd2ZSBiZWVuIHNvIG1hbnkgdGltZXNcclxuXHJcblRoZSBncmFzcyB3YXMgZ3JlZW5lclxyXG5UaGUgbGlnaHQgd2FzIGJyaWdodGVyXHJcblRoZSB0YXN0ZSB3YXMgc3dlZXRlclxyXG5UaGUgbmlnaHRzIG9mIHdvbmRlclxyXG5XaXRoIGZyaWVuZHMgc3Vycm91bmRlZFxyXG5UaGUgZGF3biBtaXN0IGdsb3dpbmdcclxuVGhlIHdhdGVyIGZsb3dpbmdcclxuVGhlIGVuZGxlc3Mgcml2ZXJcclxuRm9yZXZlciBhbmQgZXZlciIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0JHQk01dldpQkxvL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQkdCTTV2V2lCTG8vbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvQkdCTTV2V2lCTG8vaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0JHQk01dldpQkxvL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMjcsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIkJHQk01dldpQkxvIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIkJHQk01dldpQkxvIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDEwLTAzLTA3VDE4OjQ5OjE5WiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiaEhRZjQzMUtqdUg3ZWEtMTNVaVNTOVNIWTlrIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0elJEQkRPRVpET1VNME1EWTVORUV6IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDMtMzBUMjI6NTc6NTZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogInBpbmsgZmxveWQgLSBkaXJ0eSB3b21hbiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogImRlIGxhIHBlbGljdWxhIHRoZSB3YWxsIGRlIHBpbmsgZmxveWQiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9GMlJTNXlLaGh0Yy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0YyUlM1eUtoaHRjL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0YyUlM1eUtoaHRjL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMjgsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIkYyUlM1eUtoaHRjIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIkYyUlM1eUtoaHRjIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDEwLTAyLTAyVDE4OjUyOjEwWiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiV0pyYUNRMmROZG9BMUNsVWtMbVUwajdSVEtNIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk1Q01FUTJNams1TlRjM05EWkZSVU5CIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDQtMDJUMjE6Mzc6MTZaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBZb3VuZyBMdXN0IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiXCJZb3VuZyBMdXN0XCJcbkkgYW0ganVzdCBhIG5ldyBib3kgXG4gQSBzdHJhbmdlciBpbiB0aGlzIHRvd24gXG4gV2hlcmUgYXJlIGFsbCB0aGUgZ29vZCB0aW1lcyBcbiBXaG8ncyBnb25uYSBzaG93IHRoaXMgc3RyYW5nZXIgYXJvdW5kPyBcbiBPb29vb29vb2ggSSBuZWVkIGEgZGlydHkgd29tYW4gXG4gT29vb29vb29oIEkgbmVlZCBhIGRpcnR5IGdpcmwgXG4gV2lsbCBzb21lIHdvbWFuIGluIHRoaXMgZGVzZXJ0IGxhbmQgXG4gTWFrZSBtZSBmZWVsIGxpa2UgYSByZWFsIG1hbiBcbiBUYWtlIHRoaXMgcm9jayBhbmQgcm9sbCByZWZ1Z2VlIFxuIE9vb2ggQmFiZSBzZXQgbWUgZnJlZSBcbiBPb29vb29vb2ggSSBuZWVkIGEgZGlydHkgd29tYW4gXG4gT29vb29vb29oIEkgbmVlZCBhIGRpcnR5IGdpcmwuIFxuIE9vb29vb29vaCBJIG5lZWQgYSBkaXJ0eSB3b21hbiBcbiBPb29vb29vb2ggSSBuZWVkIGEgZGlydHkgZ2lybC4iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8zTG82aVQ3ZTA4MC9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNMbzZpVDdlMDgwL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNMbzZpVDdlMDgwL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8zTG82aVQ3ZTA4MC9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzNMbzZpVDdlMDgwL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAyOSwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiM0xvNmlUN2UwODAiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiM0xvNmlUN2UwODAiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTQtMTAtMTZUMjI6MDc6MzVaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJNR0RLTWtjS0Fva1J2NG80aU1JQVlhUDBDM00iLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQyTVRJNE5qYzJRak0xUmpVMU1qbEciLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wNC0wN1QxNTowODo0M1oiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIFRpbWUiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJBdWRpbyBhbmQgbHlyaWNzIGZvciBcIlRpbWVcIiBieSBQaW5rIEZsb3lkLlxuXG5Gcm9tIHRoZSBcIkRhcmsgU2lkZSBvZiB0aGUgTW9vblwiIGFsYnVtXG5cbkx5cmljczpcblxuVGlja2luZyBhd2F5IHRoZSBtb21lbnRzIHRoYXQgbWFrZSB1cCBhIGR1bGwgZGF5IFxuRnJpdHRlciBhbmQgd2FzdGUgdGhlIGhvdXJzIGluIGFuIG9mZmhhbmQgd2F5XG5LaWNraW5nIGFyb3VuZCBvbiBhIHBpZWNlIG9mIGdyb3VuZCBpbiB5b3VyIGhvbWUgdG93blxuV2FpdGluZyBmb3Igc29tZW9uZSBvciBzb21ldGhpbmcgdG8gc2hvdyB5b3UgdGhlIHdheVxuXG5UaXJlZCBvZiBseWluZyBpbiB0aGUgc3Vuc2hpbmUgc3RheWluZyBob21lIHRvIHdhdGNoIHRoZSByYWluXG5BbmQgeW91IGFyZSB5b3VuZyBhbmQgbGlmZSBpcyBsb25nIGFuZCB0aGVyZSBpcyB0aW1lIHRvIGtpbGwgdG9kYXlcbkFuZCB0aGVuIG9uZSBkYXkgeW91IGZpbmQgdGVuIHllYXJzIGhhdmUgZ290IGJlaGluZCB5b3Vcbk5vIG9uZSB0b2xkIHlvdSB3aGVuIHRvIHJ1biwgeW91IG1pc3NlZCB0aGUgc3RhcnRpbmcgZ3VuXG5cbkFuZCB5b3UgcnVuIGFuZCB5b3UgcnVuIHRvIGNhdGNoIHVwIHdpdGggdGhlIHN1biwgYnV0IGl0J3Mgc2lua2luZ1xuUmFjaW5nIGFyb3VuZCB0byBjb21lIHVwIGJlaGluZCB5b3UgYWdhaW5cblRoZSBzdW4gaXMgdGhlIHNhbWUgaW4gYSByZWxhdGl2ZSB3YXksIGJ1dCB5b3UncmUgb2xkZXJcblNob3J0ZXIgb2YgYnJlYXRoIGFuZCBvbmUgZGF5IGNsb3NlciB0byBkZWF0aFxuXG5FdmVyeSB5ZWFyIGlzIGdldHRpbmcgc2hvcnRlciwgbmV2ZXIgc2VlbSB0byBmaW5kIHRoZSB0aW1lXG5QbGFucyB0aGF0IGVpdGhlciBjb21lIHRvIG5hdWdodCBvciBoYWxmIGEgcGFnZSBvZiBzY3JpYmJsZWQgbGluZXNcbkhhbmdpbmcgb24gcXVpZXQgZGVzcGVyYXRpb24gaXMgdGhlIEVuZ2xpc2ggd2F5XG5UaGUgdGltZSBpcyBnb25lLCB0aGUgc29uZyBpcyBvdmVyLCB0aG91Z2h0IEknZCBzb21ldGhpbmcgbW9yZSB0byBzYXlcblxuQlJFQVRIRSBSRVBSSVNFXG5Ib21lLCBob21lIGFnYWluXG5JIGxpa2UgdG8gYmUgaGVyZSB3aGVuIEkgY2FuXG5BbmQgd2hlbiBJIGNvbWUgaG9tZSBjb2xkIGFuZCB0aXJlZFxuSXQncyBnb29kIHRvIHdhcm0gbXkgYm9uZXMgYmVzaWRlIHRoZSBmaXJlXG5GYXIgYXdheSBhY3Jvc3MgdGhlIGZpZWxkXG5UaGUgdG9sbGluZyBvZiB0aGUgaXJvbiBiZWxsXG5DYWxscyB0aGUgZmFpdGhmdWwgdG8gdGhlaXIga25lZXNcblRvIGhlYXIgdGhlIHNvZnRseSBzcG9rZW4gbWFnaWMgc3BlbGxzLlxuXG4oQykgMTk3MyBQaW5rIEZsb3lkIFJlY29yZHMgTHRkIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvLUV6VVJwVEY1YzgvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8tRXpVUnBURjVjOC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8tRXpVUnBURjVjOC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvLUV6VVJwVEY1Yzgvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8tRXpVUnBURjVjOC9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMzAsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIi1FelVScFRGNWM4IgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIi1FelVScFRGNWM4IiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE1LTA5LTI5VDA4OjE4OjQ0WiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAibnFKVWtoYk9YNlluY3daU1FpYThhZEljcnlVIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0NVJqTkZNRGhHUTBRMlJrRkNRVGMxIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDQtMDdUMTU6MDg6NTNaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBTaGVlcCAtIEFuaW1hbHMgMTk3NyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNoZWVwIGZyb20gUGluayBGbG95ZHMgYWxidW0sIEFuaW1hbHMgcmVhbGVzZWQgaW4gMTk3NyIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzk4U0FUMzJhXzlBL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOThTQVQzMmFfOUEvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOThTQVQzMmFfOUEvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLzk4U0FUMzJhXzlBL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvOThTQVQzMmFfOUEvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDMxLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICI5OFNBVDMyYV85QSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICI5OFNBVDMyYV85QSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxMi0wMi0yOVQyMjowMzo0MVoiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogImpEcXJWYjRaWmtrckphX005a0tSalVOdFl1WSIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NDBRVEEzTlRVMlJrTTFRemxDTXpZeCIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTA0LTA3VDE1OjA5OjA5WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gXCJIZXkgWW91XCIiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJQaW5rIEZsb3lkIC0gXCJIZXkgWW91XCIsIGZyb20gdGhlIGFsYnVtIFwiVGhlIFdhbGxcIi4iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9URmptdmZSdmpUYy9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1RGam12ZlJ2alRjL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1RGam12ZlJ2alRjL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9URmptdmZSdmpUYy9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDMyLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJURmptdmZSdmpUYyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJURmptdmZSdmpUYyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxMS0wNi0wNFQwMDo1MTo1M1oiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIm9XdkU2WWNLQ01tSzN1S19Jc09VUC1pMXBkSSIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NUJSakpET0RrNVJFTTBOamt6TVVJeSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTA0LTA3VDE1OjA5OjIzWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gQnJhaW4gRGFtYWdlLCBFY2xpcHNlIC0gTHlyaWNzIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiUGluayBGbG95ZFxuVGhlIERhcmsgU2lkZSBPZiBUaGUgTW9vbiAtIDE5NzNcbkJyYWluIERhbWFnZSwgRWNsaXBzZVxuXG5Db3B5cmlnaHQgRGlzY2xhaW1lciBVbmRlciBTZWN0aW9uIDEwNyBvZiB0aGUgQ29weXJpZ2h0IEFjdCAxOTc2LCBhbGxvd2FuY2UgaXMgbWFkZSBmb3IgXCJmYWlyIHVzZVwiIGZvciBwdXJwb3NlcyBzdWNoIGFzIGNyaXRpY2lzbSwgY29tbWVudCwgbmV3cyByZXBvcnRpbmcsIHRlYWNoaW5nLCBzY2hvbGFyc2hpcCwgYW5kIHJlc2VhcmNoLiBGYWlyIHVzZSBpcyBhIHVzZSBwZXJtaXR0ZWQgYnkgY29weXJpZ2h0IHN0YXR1dGUgdGhhdCBtaWdodCBvdGhlcndpc2UgYmUgaW5mcmluZ2luZy4gTm9uLXByb2ZpdCwgZWR1Y2F0aW9uYWwgb3IgcGVyc29uYWwgdXNlIHRpcHMgdGhlIGJhbGFuY2UgaW4gZmF2b3Igb2YgZmFpciB1c2UuXG5cbkkgRE8gTk9UIE9XTiBUSEUgU09ORywgVEhFIElNQUdFUywgQU5EIFRIRSBMWVJJQ1MgT0YgVEhFIFZJREVPLiBJIERPIE5PVCBDTEFJTSBBTlkgUklHSFQgT04gVEhFTSwgTk8gQ09QWVJJR0hUIElORlJJTkdFTUVOVCBJTlRFTkRFRCBIRVJFLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL21SSC1VUnBnWnJNL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbVJILVVScGdack0vbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbVJILVVScGdack0vaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL21SSC1VUnBnWnJNL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbVJILVVScGdack0vbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDMzLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJtUkgtVVJwZ1pyTSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJtUkgtVVJwZ1pyTSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxNi0wNC0yMFQxMToxMzoyOFoiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIm1aQUhQRmRhSTVDLVRQT19uWEdqNzBkMkY2ZyIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NHhPVEV6UXpoQlF6VTNNRE5ETmpjeiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTA0LTA3VDE1OjA5OjM1WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gUnVuIExpa2UgSGVsbCAoTGl2ZSkiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJVcGRhdGVkIGF1ZGlvIGZyb20gXCJJcyBUaGVyZSBBbnlib2R5IE91dCBUaGVyZT8gVGhlIFdhbGwgTGl2ZSAxOTgwLTgxXCIuIFRoZSB2aWRlbyB3YXMgcmVjb3JkZWQgQXVndXN0IDl0aCwgMTk4MC4iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9sS2dPZTFSbDhZWS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2xLZ09lMVJsOFlZL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2xLZ09lMVJsOFlZL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMzQsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogImxLZ09lMVJsOFlZIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogImxLZ09lMVJsOFlZIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDA3LTA4LTI4VDAzOjU2OjQ5WiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAib2dtTTIxVGJlRWpLbDIxTTZaOFN2R2VrOWk0IiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk1R05EZzFOamMxUXpaRVJqbEZSakU1IiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDQtMDdUMTU6MTA6MDVaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBDb21pbmcgQmFjayB0byBMaWZlIC0gRGl2aXNpb24gQmVsbCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk9uZSBvZiBteSB0b3AgNSBQaW5rIEZsb3lkIHNvbmdzLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3VoVjRtZV9rOFk4L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdWhWNG1lX2s4WTgvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvdWhWNG1lX2s4WTgvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAzNSwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAidWhWNG1lX2s4WTgiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAidWhWNG1lX2s4WTgiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMDgtMDEtMjRUMTY6NDk6MTFaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJ2Zmd1TENiTEFzOHl3NGtqakY5eGxJZ2VkMnciLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTR6UXpGQk4wUkdOek5GUkVGQ01qQkUiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wNC0wN1QxNToxMDozMloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiW0hEXSBQaW5rIEZsb3lkIC0gVGhlIEdyZWF0IEdpZyBJbiBUaGUgU2t5IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiUGluayBGbG95ZCdzIGV0aGVyZWFsIHNvbmcgZnJvbSB0aGUgZXBpYyBEYXJrIFNpZGUgT2YgVGhlIE1vb24gYWxidW0uXHJcbk5vIGNvcHlyaWdodCBpbmZyaW5nZW1lbnQgaW50ZW5kZWQuIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvY1ZCQ0UzZ2FOeGMvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9jVkJDRTNnYU54Yy9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9jVkJDRTNnYU54Yy9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvY1ZCQ0UzZ2FOeGMvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAzNiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiY1ZCQ0UzZ2FOeGMiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiY1ZCQ0UzZ2FOeGMiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTAtMDgtMzFUMjM6MDc6MTVaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJ1WHVGRXNpU3h6V2RkVEFwdEZpUEFncXF4dlkiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQ1TmtWRU5Ua3hSRGRDUVVGQk1EWTQiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wNC0wN1QxNToxMDo0NFoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtLSBUYWtlIGl0IEJhY2siLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJUYWtlIGl0IEJhY2sgYnkgUGluayBGbG95ZFxyXG5cclxuQWxidW06IERpdmlzaW9uIEJlbGxcclxuXHJcbkhlciBsb3ZlIHJhaW5zIGRvd24gb24gbWUgZWFzeSBhcyB0aGUgYnJlZXplXHJcbkkgbGlzdGVuIHRvIGhlciBicmVhdGhpbmcgaXQgc291bmRzIGxpa2UgdGhlIHdhdmVzIG9uIHRoZSBzZWFcclxuSSB3YXMgdGhpbmtpbmcgYWxsIGFib3V0IGhlciwgYnVybmluZyB3aXRoIHJhZ2UgYW5kIGRlc2lyZVxyXG5XZSB3ZXJlIHNwaW5uaW5nIGludG8gZGFya25lc3MsYW5kIHRoZSBlYXJ0aCB3YXMgb24gZmlyZVxyXG5cclxuU2hlIGNvdWxkIHRha2UgaXQgYmFjaywgc2hlIG1pZ2h0IHRha2UgaXQgYmFjayBzb21lZGF5XHJcblxyXG5TbyBJIHNweSBvbiBoZXIsIEkgbGllIHRvIGhlciwgSSBtYWtlIHByb21pc2VzIEkgY2Fubm90IGtlZXBcclxuVGhlbiBJIGhlYXIgaGVyIGxhdWdodGVyIHJpc2luZywgcmlzaW5nIGZyb20gdGhlIGRlZXBcclxuQW5kIEkgbWFrZSBoZXIgcHJvdmUgaGVyIGxvdmUgZm9yIG1lLCBJIHRha2UgYWxsIHRoYXQgSSBjYW4gdGFrZVxyXG5BbmQgSSBwdXNoIGhlciB0byB0aGUgbGltaXQgdG8gc2VlIGlmIHNoZSB3aWxsIGJyZWFrXHJcblxyXG5TaGUgbWlnaHQgdGFrZSBpdCBiYWNrLCBzaGUgY291bGQgdGFrZSBpdCBiYWNrIHNvbWUgZGF5XHJcblxyXG5Ob3cgSSBoYXZlIHNlZW4gdGhlIHdhcm5pbmdzLCBzY3JlYW1pbmcgZnJvbSBhbGwgc2lkZXNcclxuYW5kIEl0J3MgZWFzeSB0byBpZ25vcmUgdGhlbSBhbmQgR29kIGtub3dzIEkndmUgdHJpZWRcclxuQWxsIHRoaXMgdGVtcHRhdGlvbiwgaXQgYWxsIHR1cm5lZCBteSBmYWl0aCB0byBsaWVzXHJcbidUaWwgSSBjb3VsZG4ndCBzZWUgdGhlIGRhbmdlciBvciBoZWFyIHRoZSByaXNpbmcgdGlkZVxyXG5cclxuU2hlIGNhbiB0YWtlIGl0IGJhY2ssIHNoZSB3aWxsIHRha2UgaXQgYmFjayBzb21lIGRheVxyXG5TaGUgY2FuIHRha2UgaXQgYmFjaywgc2hlIHdpbGwgdGFrZSBpdCBiYWNrIHNvbWUgZGF5XHJcblNoZSBjYW4gdGFrZSBpdCBiYWNrLCBzaGUgd2lsbCB0YWtlIGl0IGJhY2sgc29tZSBkYXkuLi5cclxuRURJVDpcclxuSSB3YXMgcmVhbGx5IHNob2NrZWQgdG8gaGVhciB0aGF0IGZvdW5kZXIgbWVtYmVyIG9mIFBpbmsgRmxveWQgYW5kIGtleWJvYXJkaXN0LFJpY2hhcmQgV3JpZ2h0LCBwYXNzZWQgYXdheSBvbiBTZXB0ZW1iZXIgMTV0aCwyMDA4LlxyXG5IZSB3aWxsIGFsd2F5cyBiZSByZW1lbWJlcmVkIGZvciB0aGUgaW5zcGlyaW5nIG11c2ljIGhlIGNyZWF0ZWQgYWxvbmcgd2l0aCB0aGUgRmxveWQuXHJcblJlc3QgaW4gUGVhY2UsIFJpY2hhcmQgV3JpZ2h0ISIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL1ZESDdKcUZfRUZnL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVkRIN0pxRl9FRmcvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvVkRIN0pxRl9FRmcvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAzNywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiVkRIN0pxRl9FRmciCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiVkRIN0pxRl9FRmciLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMDgtMDEtMjlUMjA6NTg6NDFaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJVOEFCYjhJUE1zOTZjNE9tQ2U0ckJXb2dEWDQiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQxTXpZNE16Y3dPVUZGUlVVM1F6RXgiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wNC0wN1QxNToxMzozNFoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIFRpbWUgKDIwMTEgUmVtYXN0ZXJlZCkiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICIiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9Kd1lYNTJCUDJTay9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0p3WVg1MkJQMlNrL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0p3WVg1MkJQMlNrL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogMzgsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogIkp3WVg1MkJQMlNrIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogIkp3WVg1MkJQMlNrIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDEzLTEyLTAyVDA1OjAyOjA5WiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiZHZVNnhBVTctQ21zTHU4YmU1QzMtMXZjdlhBIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0eVFqWkZSa0V4UWpGR09EazNSVUZEIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDQtMDdUMTU6MTM6NTFaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBCcmVhdGhlIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiT2ZmaWNpYWwgYXVkaW8gdG8gQnJlYXRoZSAoSW4gVGhlIEFpcikgYnkgUGluayBGbG95ZFxuXG5MeXJpY3M6XG5cbkJyZWF0aGUsIGJyZWF0aGUgaW4gdGhlIGFpciBcbkRvbid0IGJlIGFmcmFpZCB0byBjYXJlIFxuTGVhdmUsIGJ1dCBkb24ndCBsZWF2ZSBtZSBcbkxvb2sgYXJvdW5kIFxuQ2hvb3NlIHlvdXIgb3duIGdyb3VuZCBcblxuTG9uZyB5b3UgbGl2ZSBhbmQgaGlnaCB5b3UgZmx5IFxuQW5kIHNtaWxlcyB5b3UnbGwgZ2l2ZSBhbmQgdGVhcnMgeW91J2xsIGNyeSBcbkFuZCBhbGwgeW91IHRvdWNoIGFuZCBhbGwgeW91IHNlZSBcbklzIGFsbCB5b3VyIGxpZmUgd2lsbCBldmVyIGJlIFxuXG5SdW4sIHJhYmJpdCBydW4gXG5EaWcgdGhhdCBob2xlLCBmb3JnZXQgdGhlIHN1biBcbkFuZCB3aGVuIGF0IGxhc3QgdGhlIHdvcmsgaXMgZG9uZSBcbkRvbid0IHNpdCBkb3duIFxuSXQncyB0aW1lIHRvIGRpZyBhbm90aGVyIG9uZSBcblxuRm9yIGxvbmcgeW91IGxpdmUgYW5kIGhpZ2ggeW91IGZseSBcbkJ1dCBvbmx5IGlmIHlvdSByaWRlIHRoZSB0aWRlIFxuQW5kIGJhbGFuY2VkIG9uIHRoZSBiaWdnZXN0IHdhdmUgXG5Zb3UgcmFjZSB0b3dhcmRzIGFuIGVhcmx5IGdyYXZlXG5cbi0tXG5cbihDKSAxOTczIFBpbmsgRmxveWQgTXVzaWMgTHRkIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbXJvanJEQ0kwMmsvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9tcm9qckRDSTAyay9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9tcm9qckRDSTAyay9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvbXJvanJEQ0kwMmsvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiAzOSwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAibXJvanJEQ0kwMmsiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAibXJvanJEQ0kwMmsiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMDktMDMtMTBUMTg6Mjk6NTlaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJiWGZWVEJjM2V4cHV1V0VyYVZ3elZFOG55SUkiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTR5UVVKRk5VVkNNelZETmpjeFJUbEYiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wNC0wN1QxNToxNDoyMloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIFdlbGNvbWUgdG8gdGhlIE1hY2hpbmUgKE9mZmljaWFsIE11c2ljIFZpZGVvKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk91dCBub3c6IFBpbmsgRmxveWQncyAnVGhlIExhdGVyIFllYXJzJyBib3ggc2V0IGh0dHBzOi8vcGlua2Zsb3lkLmxuay50by9UaGVMYXRlclllYXJzXHJcblxuXCJXZWxjb21lIHRvIHRoZSBNYWNoaW5lXCIgaXMgdGhlIHNlY29uZCBzb25nIG9uIFBpbmsgRmxveWQncyAxOTc1IGFsYnVtIFdpc2ggWW91IFdlcmUgSGVyZS4gVGhlIHNvbmcgaXMgc2FpZCB0byBiZSBpbnNwaXJlZCBieSBHZW9yZ2UgT3J3ZWxsJ3MgYm9vayAxOTg0LCBpbiB3aGljaCBhIG1hbiBpcyB0cnlpbmcgdG8gZXNjYXBlIHRoZSBnb3Zlcm5tZW50IHdoaWNoIGlzIGJyYWlud2FzaGluZyBpdHMgY2l0aXplbnMgd2l0aCBUViBzaG93cyBhbmQgb3BwcmVzc2l2ZSBydWxlcy5cblxuVGhlIGljb25pYyB2aWRlbyB3YXMgY3JlYXRlZCBieSBHZXJhbGQgU2NhcmZlIGluaXRpYWxseSBhcyBhIGJhY2tkcm9wIGZpbG0gZm9yIHdoZW4gdGhlIGJhbmQgcGxheWVkIHRoZSB0cmFjayBvbiBpdHMgMTk3NyBJbiB0aGUgRmxlc2ggdG91ci5cblxuVEhFIEVBUkxZIFlFQVJTXG4rIE9VVCBOT1cgaHR0cDovL3NtYXJ0dXJsLml0L1RFWVxuKyA2IEluZGl2aWR1YWwgVm9sdW1lcyBhdmFpbGFibGUgYXMgTXVsdGktZGlzYyBCb29rLWJvdW5kIHBhY2thZ2VzIFxuKyBGZWF0dXJpbmcgUmFyZSBUcmFja3MsIERlbW9zLCBJbnRlcnZpZXdzLCBhbmQgRmlsbSBGb290YWdlIFxuKyBFYWNoIOKAmFllYXLigJkgQ0QsIERWRCAmIEJsdS1SYXkgcGFja2FnZSBpbmNsdWRlcyBQaG90byBCb29rICYgTWVtb3JhYmlsaWFcblxuVEhFIExBVEVSIFlFQVJTXHJcbkluY2x1ZGVkIG9uIOKAmFRoZSBMYXRlciBZZWFyc+KAmSwgYSAxOC1kaXNjIGJveCBzZXQgKDV4Q0RzLCA2eEJsdS1SYXlzLCA1eERWRHMsMng34oCdKSBjb3ZlcmluZyB0aGUgbWF0ZXJpYWwgY3JlYXRlZCBieSBEYXZpZCBHaWxtb3VyLCBOaWNrIE1hc29uIGFuZCBSaWNoYXJkIFdyaWdodCBmcm9tIDE5ODcgb253YXJkcywgd2l0aCB1bnJlbGVhc2VkIGF1ZGlvIGFuZCBhdWRpb3Zpc3VhbCBtYXRlcmlhbCwgaW5jbHVkaW5nIHRoZSAxOTg5IFZlbmljZSBhbmQgMTk5MCBLbmVid29ydGggY29uY2VydHMsIGFzIHdlbGwgYXMgdXBkYXRlZCwgcmVzdG9yZWQgYW5kIHJlbWl4ZWQgYXVkaW8gYW5kIHZpZGVvLCAyIHggN+KAnSBzaW5nbGVzLCA2MC1wYWdlIGhhcmRiYWNrIFBob3RvIEJvb2ssIDQwLXBhZ2UgaGFyZGJhY2sgQ3JlZGl0cyBCb29rLCBMeXJpY3MgQm9vaywgMyB4IHJlcHJvZHVjdGlvbiB0b3VyIHByb2dyYW1tZXMsIGNhcmQgZW52ZWxvcGUgY29udGFpbmluZyBjb2xsZWN0aWJsZSBtZW1vcmFiaWxpYSwgcGx1cyBCbHUtcmF5cyBhbmQgRFZEcyBpbiBpbmRpdmlkdWFsIHdhbGxldHMuXHJcblxyXG5BbHNvIGF2YWlsYWJsZTogMTItdHJhY2sg4oCYSGlnaGxpZ2h0c+KAmSBwYWNrYWdlICgyLUxQIG9yIDEtQ0QpIGh0dHBzOi8vcGlua2Zsb3lkLmxuay50by9UaGVMYXRlclllYXJzXHJcblxyXG5QSU5LIEZMT1lEIFNPQ0lBTCBNRURJQVxyXG5GYWNlYm9vayBodHRwOi8vc21hcnR1cmwuaXQvUEZfRkJcclxuVHdpdHRlciBodHRwOi8vc21hcnR1cmwuaXQvUEZfVHdpdHRlclxyXG5JbnN0YWdyYW0gaHR0cDovL3NtYXJ0dXJsLml0L1BGX0luc3RhZ3JhbVxyXG5TcG90aWZ5IGh0dHA6Ly9zbWFydHVybC5pdC9QRl9TcG90aWZ5XHJcbllvdVR1YmUgaHR0cDovL3NtYXJ0dXJsLml0L1BGX1lUXHJcbkFwcGxlIGh0dHA6Ly9zbWFydHVybC5pdC9QRl9BcHBsZSIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2ZuMVItNXBfajVjL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZm4xUi01cF9qNWMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZm4xUi01cF9qNWMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2ZuMVItNXBfajVjL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogNDAsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogImZuMVItNXBfajVjIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogImZuMVItNXBfajVjIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDE4LTA4LTMxVDE2OjAwOjA2WiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiTXp6RnNvT3ZqMjNWTkVCN3JOMkRhdUtRT3JFIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0MFF6UkRPRVUwUVVZd05VSXhOME0xIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDQtMDdUMTU6MTQ6MzVaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBJTksgRkxPWUQgIEhBVkUgQSBDSUdBUiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlBJTksgRkxPWUQgLSBIQVZFIEEgQ0lHQVIgKHJlbWFzdGVyZWQpIEhRIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvaE1yM0t0WVVDY0kvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9oTXIzS3RZVUNjSS9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9oTXIzS3RZVUNjSS9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvaE1yM0t0WVVDY0kvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfSwKICAgICAgICAgICJtYXhyZXMiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9oTXIzS3RZVUNjSS9tYXhyZXNkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyODAsCiAgICAgICAgICAgICJoZWlnaHQiOiA3MjAKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJjaGFubmVsVGl0bGUiOiAiUm9zZSBUaG9ybiIsCiAgICAgICAgInBsYXlsaXN0SWQiOiAiUEw0cEdrazNRQlcyOG42UUNCV2NtRTc2Um83T05FemxNRyIsCiAgICAgICAgInBvc2l0aW9uIjogNDEsCiAgICAgICAgInJlc291cmNlSWQiOiB7CiAgICAgICAgICAia2luZCI6ICJ5b3V0dWJlI3ZpZGVvIiwKICAgICAgICAgICJ2aWRlb0lkIjogImhNcjNLdFlVQ2NJIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImNvbnRlbnREZXRhaWxzIjogewogICAgICAgICJ2aWRlb0lkIjogImhNcjNLdFlVQ2NJIiwKICAgICAgICAidmlkZW9QdWJsaXNoZWRBdCI6ICIyMDEzLTA2LTAxVDIxOjQ4OjUwWiIKICAgICAgfSwKICAgICAgInN0YXR1cyI6IHsKICAgICAgICAicHJpdmFjeVN0YXR1cyI6ICJwdWJsaWMiCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogInlvdXR1YmUjcGxheWxpc3RJdGVtIiwKICAgICAgImV0YWciOiAiWC1tRzg4c3pQaWMyUkNjcl9TZk1ueXhmTXFRIiwKICAgICAgImlkIjogIlVFdzBjRWRyYXpOUlFsY3lPRzQyVVVOQ1YyTnRSVGMyVW04M1QwNUZlbXhOUnk0MVJUTkJSRVl3TWtJNVF6VTNSa1kyIiwKICAgICAgInNuaXBwZXQiOiB7CiAgICAgICAgInB1Ymxpc2hlZEF0IjogIjIwMTktMDQtMDdUMTU6MTQ6NDlaIiwKICAgICAgICAiY2hhbm5lbElkIjogIlVDXzEzUk1KYnhJUFNPT0RMTlhoXzdFUSIsCiAgICAgICAgInRpdGxlIjogIlBpbmsgRmxveWQgLSBNb25leSAoT2ZmaWNpYWwgTXVzaWMgVmlkZW8pIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiT3V0IG5vdzogUGluayBGbG95ZCdzICdUaGUgTGF0ZXIgWWVhcnMnIGJveCBzZXQgaHR0cHM6Ly9waW5rZmxveWQubG5rLnRvL1RoZUxhdGVyWWVhcnNcclxuXG5UaGUgb2ZmaWNpYWwgcHJvbW8gdmlkZW8gZm9yICdNb25leScgYnkgUGluayBGbG95ZCwgdGFrZW4gZnJvbSB0aGUgYWxidW0gJ1RoZSBEYXJrIFNpZGUgT2YgVGhlIE1vb24nXG5cbk9yaWdpbmFsbHkgcmVsZWFzZWQgaW4gMTk3MywgJ1RoZSBEYXJrIFNpZGUgb2YgVGhlIE1vb24nIGJlY2FtZSBQaW5rIEZsb3lkJ3MgZmlyc3QgbnVtYmVyIDEgYWxidW0gaW4gdGhlIFVTLCByZW1haW5pbmcgb24gdGhlIGNoYXJ0IGZvciA3NDEgd2Vla3MgYmV0d2VlbiAxOTczIGFuZCAxOTg4LiBPbmUgb2YgdGhlIGJlc3Qtc2VsbGluZyBhbmQgbW9zdCBjcml0aWNhbGx5IGFjY2xhaW1lZCBhbGJ1bXMgb2YgYWxsIHRpbWUsIFRoZSBEYXJrIFNpZGUgb2YgVGhlIE1vb24gYWxzbyBpbnRyb2R1Y2VkIHRoZSBpY29uaWMgYWxidW0gY292ZXIgYXJ0d29yayBieSBIaXBnbm9zaXMsIGFmdGVyIGEgcmVxdWVzdCBmb3IgYSAnc2ltcGxlIGFuZCBib2xkJyBkZXNpZ24uXG5cblRoZSBhbGJ1bSB3YXMgcmUtbWFzdGVyZWQgaW4gMjAxMSBhbmQgRGlzY292ZXJ5ICgxQ0QpLCAgRXhwZXJpZW5jZSAoMkNEKSwgSW1tZXJzaW9uICg2Q0QpICBhbmQgdmlueWwgZWRpdGlvbnMgYXJlIGN1cnJlbnRseSBhdmFpbGFibGUuIEdvIHRvIGh0dHA6Ly93d3cud2h5cGlua2Zsb3lkLmNvbSBmb3IgbW9yZSBkZXRhaWxzLlxuXG5EaXNjb3ZlcnkgZWRpdGlvbiBDRDogaHR0cDovL3NtYXJ0dXJsLml0L2Rzb3RtZGlzYyBcbkV4cGVyaWVuY2UgZWRpdGlvbiBDRDogaHR0cDovL3NtYXJ0dXJsLml0L2Rzb3RtZXhwXG5JbW1lcnNpb24gZWRpdGlvbiA6IGh0dHA6Ly9zbWFydHVybC5pdC9kc290bWltbVxuVmlueWwgZWRpdGlvbjogaHR0cDovL3NtYXJ0dXJsLml0L2Rzb3RtdmlueWwgXG5EaXNjb3ZlcnkgaVR1bmVzOiBodHRwOi8vc21hcnR1cmwuaXQvZHNvdG1kaXNjaXQgXG5FeHBlcmllbmNlIGlUdW5lczogaHR0cDovL3NtYXJ0dXJsLml0L2Rzb3RtZXhpdCBcblNwb3RpZnk6IGh0dHA6Ly9zbWFydHVybC5pdC9kc290bXNwb3QgUGluayBGbG95ZCBUaGUgRWFybHkgWWVhcnMgMTk2NS0xOTcyXG5cblRIRSBFQVJMWSBZRUFSU1xuKyBPVVQgTk9XIGh0dHA6Ly9zbWFydHVybC5pdC9URVlcbisgNiBJbmRpdmlkdWFsIFZvbHVtZXMgYXZhaWxhYmxlIGFzIE11bHRpLWRpc2MgQm9vay1ib3VuZCBwYWNrYWdlcyBcbisgRmVhdHVyaW5nIFJhcmUgVHJhY2tzLCBEZW1vcywgSW50ZXJ2aWV3cywgYW5kIEZpbG0gRm9vdGFnZSBcbisgRWFjaCDigJhZZWFy4oCZIENELCBEVkQgJiBCbHUtUmF5IHBhY2thZ2UgaW5jbHVkZXMgUGhvdG8gQm9vayAmIE1lbW9yYWJpbGlhXG5cblRIRSBMQVRFUiBZRUFSU1xyXG5JbmNsdWRlZCBvbiDigJhUaGUgTGF0ZXIgWWVhcnPigJksIGEgMTgtZGlzYyBib3ggc2V0ICg1eENEcywgNnhCbHUtUmF5cywgNXhEVkRzLDJ4N+KAnSkgY292ZXJpbmcgdGhlIG1hdGVyaWFsIGNyZWF0ZWQgYnkgRGF2aWQgR2lsbW91ciwgTmljayBNYXNvbiBhbmQgUmljaGFyZCBXcmlnaHQgZnJvbSAxOTg3IG9ud2FyZHMsIHdpdGggdW5yZWxlYXNlZCBhdWRpbyBhbmQgYXVkaW92aXN1YWwgbWF0ZXJpYWwsIGluY2x1ZGluZyB0aGUgMTk4OSBWZW5pY2UgYW5kIDE5OTAgS25lYndvcnRoIGNvbmNlcnRzLCBhcyB3ZWxsIGFzIHVwZGF0ZWQsIHJlc3RvcmVkIGFuZCByZW1peGVkIGF1ZGlvIGFuZCB2aWRlbywgMiB4IDfigJ0gc2luZ2xlcywgNjAtcGFnZSBoYXJkYmFjayBQaG90byBCb29rLCA0MC1wYWdlIGhhcmRiYWNrIENyZWRpdHMgQm9vaywgTHlyaWNzIEJvb2ssIDMgeCByZXByb2R1Y3Rpb24gdG91ciBwcm9ncmFtbWVzLCBjYXJkIGVudmVsb3BlIGNvbnRhaW5pbmcgY29sbGVjdGlibGUgbWVtb3JhYmlsaWEsIHBsdXMgQmx1LXJheXMgYW5kIERWRHMgaW4gaW5kaXZpZHVhbCB3YWxsZXRzLlxyXG5cclxuQWxzbyBhdmFpbGFibGU6IDEyLXRyYWNrIOKAmEhpZ2hsaWdodHPigJkgcGFja2FnZSAoMi1MUCBvciAxLUNEKSBodHRwczovL3BpbmtmbG95ZC5sbmsudG8vVGhlTGF0ZXJZZWFyc1xyXG5cclxuUElOSyBGTE9ZRCBTT0NJQUwgTUVESUFcclxuRmFjZWJvb2sgaHR0cDovL3NtYXJ0dXJsLml0L1BGX0ZCXHJcblR3aXR0ZXIgaHR0cDovL3NtYXJ0dXJsLml0L1BGX1R3aXR0ZXJcclxuSW5zdGFncmFtIGh0dHA6Ly9zbWFydHVybC5pdC9QRl9JbnN0YWdyYW1cclxuU3BvdGlmeSBodHRwOi8vc21hcnR1cmwuaXQvUEZfU3BvdGlmeVxyXG5Zb3VUdWJlIGh0dHA6Ly9zbWFydHVybC5pdC9QRl9ZVFxyXG5BcHBsZSBodHRwOi8vc21hcnR1cmwuaXQvUEZfQXBwbGUiLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8tMGtjZXQ0YVBwUS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLy0wa2NldDRhUHBRL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpLy0wa2NldDRhUHBRL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS8tMGtjZXQ0YVBwUS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDQyLAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICItMGtjZXQ0YVBwUSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICItMGtjZXQ0YVBwUSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxNC0wNi0yNVQxNToxNDozNVoiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIktMM0psVEY3YjJPb2VvSW9yZzB4bXpGN2FyYyIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NUVOakkxUVVJME1ESTVORVF6T0RGRSIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTA0LTA3VDE1OjE1OjA0WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gSGF2ZSBBIENpZ2FyIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiIiwKICAgICAgICAidGh1bWJuYWlscyI6IHsKICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWUpMaEtkOXlvTzgvZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiA5MAogICAgICAgICAgfSwKICAgICAgICAgICJtZWRpdW0iOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZSkxoS2Q5eW9POC9tcWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMzIwLAogICAgICAgICAgICAiaGVpZ2h0IjogMTgwCiAgICAgICAgICB9LAogICAgICAgICAgImhpZ2giOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9ZSkxoS2Q5eW9POC9ocWRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNDgwLAogICAgICAgICAgICAiaGVpZ2h0IjogMzYwCiAgICAgICAgICB9LAogICAgICAgICAgInN0YW5kYXJkIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvWUpMaEtkOXlvTzgvc2RkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDY0MCwKICAgICAgICAgICAgImhlaWdodCI6IDQ4MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiA0MywKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiWUpMaEtkOXlvTzgiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiWUpMaEtkOXlvTzgiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTQtMDYtMjNUMTM6MDQ6NDRaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJwLUdZcEtKaFA2ZG96TC1UOUNjM3Brbmh6d1EiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQ0UXpWR1FVVTJRakUyTkRneE0wTTQiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wNC0wN1QxNToxNToxNVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIEJyYWluIERhbWFnZSAvIEVjbGlwc2UiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJTb25nOiBCcmFpbiBEYW1hZ2UvRWNsaXBzZVxyXG5BcnRpc3Q6IFBpbmsgRmxveWRcclxuQWxidW06IERhcmsgU2lkZSBPZiBUaGUgTW9vblxyXG5ZZWFyOiAxOTczXHJcblJlY29yZCBMYWJlbDogQ2FwaXRvbFxyXG5Xcml0ZXJzOiBCcmFpbiBEYW1hZ2U6IFdhdGVycyAtIEVjbGlwc2U6IFdhdGVyc1xyXG5cclxuQmFuZCBNZW1iZXJzOlxyXG5cclxuUm9nZXIgV2F0ZXJzIC0gTGVhZCBWb2NhbHMgJiBCYXNzXHJcbkRhdmlkIEdpbG1vdXIgLSBWb2NhbHMgJiBHdWl0YXJzXHJcbk5pY2sgTWFzb24gLSBEcnVtcyAmIFBlcmN1c3Npb25cclxuUmljaGFyZCBXcmlnaHQgLSBPcmdhbiAmIFN5bnRoZXNpc2VyXHJcblxyXG5MZXNsZXkgRHVuY2FuIC0gQmFja3VwIHZvY2Fsc1xyXG5Eb3JpcyBUcm95IC0gQmFja3VwIHZvY2Fsc1xyXG5CYXJyeSBTdC4gSm9obiAtIEJhY2t1cCB2b2NhbHNcclxuTGl6YSBTdHJpa2UgLSBCYWNrdXAgdm9jYWxzXHJcblxyXG5MeXJpY3M6IFxyXG5cclxuKEJyYWluIERhbWFnZSlcclxuXHJcblRoZSBMdW5hdGljLi4uSXMgT24gVGhlIEdyYXNzXHJcblRoZSBMdW5hdGljLi4uSXMgT24gVGhlIEdyYXNzXHJcblJlbWVtYmVyaW5nIEdhbWVzLi5BbmQgRGFpc3kgQ2hhaW5zIEFuZCBMYXVnaHNcclxuR290IFRvIEtlZXAgVGhlIExvb25pZXMgT24gVGhlIFBhdGhcclxuXHJcblRoZSBMdW5hdGljLi4uSXMgSW4gVGhlIEhhbGxcclxuVGhlIEx1bmF0aWNzLi4uQXJlIEluIE15IEhhbGxcclxuVGhlIFBhcGVyIEhvbGRzIFRoZWlyIEZvbGRlZCBGYWNlcyBUbyBUaGUgRmxvb3JcclxuQW5kIEV2ZXJ5IERheS4uLlRoZSBQYXBlciBCb3kgQnJpbmdzIE1vcmVcclxuXHJcbkFuZCBJZiBUaGUgRGFtIEJyZWFrcyBPcGVuIE1hbnkgWWVhcnMgVG8gU29vblxyXG5BbmQgSWYgVGhlcmUgSXMgTm8gUm9vbSBVcG9uIFRoZSBIaWxsXHJcbkFuZCBJZiBZb3VyIEhlYWQgRXhwbG9kZXMgV2l0aCBEYXJrIEZvcmJvZGluZ3MgVG9vXHJcbkknbGwgU2VlIFlvdSBPbiBUaGUgRGFyayBTaWRlIE9mIFRoZSBNb29uXHJcblxyXG5UaGUgTHVuYXRpYyBJcyBJbiBNeSBIZWFkXHJcblRoZSBMdW5hdGljIElzIEluIE15IEhlYWRcclxuWW91IFJhaXNlIFRoZSBCbGFkZS4uLllvdSBNYWtlIFRoZSBDaGFuZ2VcclxuWW91IFJlLWFycmFuZ2UgTWUgJ1RpbGwgSSdtIFNhbmVcclxuXHJcbllvdSBMb29rIFRoZSBEb29yXHJcbkFuZCBUaHJvdyBBd2F5IFRoZSBLZXlcclxuVGhlcmUncyBTb21lb25lIEluIE15IEhlYWQuLi5CdXQgSXQncyBOb3QgTWVcclxuXHJcbkFuZCBJZiBUaGUgQ2xvdWQgQnVyc3RzLi4uVGh1bmRlciBJbiBZb3UgRWFyXHJcbllvdSBTaG91dCBBbmQgTm8gT25lIFNlZW1zIFRvIEhlYXJcclxuQW5kIElmIFRoZSBCYW5kIFlvdSdyZSBJbiBTdGFydHMgUGxheWluZyBEaWZmZXJlbnQgVHVuZXNcclxuSSdsbCBTZWUgWW91IE9uIFRoZSBEYXJrIFNpZGUgT2YgVGhlIE1vb25cclxuXHJcbihFY2xpcHNlKVxyXG5cclxuQWxsIFRoYXQgWW91IFRvdWNoXHJcbkFsbCBUaGF0IFlvdSBTZWVcclxuQWxsIFRoYXQgWW91IFRhc3RlXHJcbkFsbCBZb3UgRmVlbFxyXG5cclxuQWxsIFRoYXQgWW91IExvdmVcclxuQWxsIFRoYXQgWW91IEhhdGVcclxuQWxsIFlvdSBEaXN0cnVzdFxyXG5BbGwgWW91IFNhdmVcclxuXHJcbkFsbCBUaGF0IFlvdSBHaXZlXHJcbkFsbCBUaGF0IFlvdSBEZWFsXHJcbkFsbCBUaGF0IFlvdSBCdXlcclxuQmVnLCBCb3Jyb3cgT3IgU3RlYWxcclxuXHJcbkFsbCBZb3UgQ3JlYXRlXHJcbkFsbCBZb3UgRGVzdHJveVxyXG5BbGwgVGhhdCBZb3UgRG9cclxuQWxsIFRoYXQgWW91IFNheVxyXG5cclxuQWxsIFRoYXQgWW91IEVhdFxyXG5FdmVyeW9uZSBZb3UgTWVldFxyXG5BbGwgVGhhdCBZb3UgU2xpZ2h0XHJcbkV2ZXJ5b25lIFlvdSBGaWdodFxyXG5cclxuQWxsIFRoYXQgSXMgTm93XHJcbkFsbCBUaGF0IElzIEdvbmVcclxuQWxsIFRoYXQncyBUbyBDb21lXHJcblxyXG5BbmQgRXZlcnl0aGluZyBVbmRlciBUaGUgU3VuIElzIEluIFR1bmVcclxuQnV0IFRoZSBTdW4gSXMgRWNsaXBzZWQgQnkgVGhlIE1vb24iLAogICAgICAgICJ0aHVtYm5haWxzIjogewogICAgICAgICAgImRlZmF1bHQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9EVlEzLVhlX3N1WS9kZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDEyMCwKICAgICAgICAgICAgImhlaWdodCI6IDkwCiAgICAgICAgICB9LAogICAgICAgICAgIm1lZGl1bSI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0RWUTMtWGVfc3VZL21xZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAzMjAsCiAgICAgICAgICAgICJoZWlnaHQiOiAxODAKICAgICAgICAgIH0sCiAgICAgICAgICAiaGlnaCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0RWUTMtWGVfc3VZL2hxZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA0ODAsCiAgICAgICAgICAgICJoZWlnaHQiOiAzNjAKICAgICAgICAgIH0sCiAgICAgICAgICAic3RhbmRhcmQiOiB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9EVlEzLVhlX3N1WS9zZGRlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogNjQwLAogICAgICAgICAgICAiaGVpZ2h0IjogNDgwCiAgICAgICAgICB9LAogICAgICAgICAgIm1heHJlcyI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0RWUTMtWGVfc3VZL21heHJlc2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTI4MCwKICAgICAgICAgICAgImhlaWdodCI6IDcyMAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiA0NCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiRFZRMy1YZV9zdVkiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiRFZRMy1YZV9zdVkiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTEtMDctMDhUMTc6MTc6NThaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJMZ0ZpbVpWb3VJMzRvWnF0cmF2M2drU0xuYkEiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTR4TXpnd016QkVSalE0TmpFek5VRTUiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wNC0wN1QxNToxNToyOVoiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIENvbWZvcnRhYmx5IE51bWIgW0hEXSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS90aGVwaW5rZmxveWRoZFxuaHR0cHM6Ly90d2l0dGVyLmNvbS9Ob2FuQ2FzdHJvXG5cblwiQ29tZm9ydGFibHkgTnVtYlwiIGlzIGEgc29uZyBieSB0aGUgRW5nbGlzaCByb2NrIGJhbmQgUGluayBGbG95ZCwgd2hpY2ggZmlyc3QgYXBwZWFycyBvbiB0aGUgMTk3OSBkb3VibGUgYWxidW0sIFRoZSBXYWxsLiBJdCB3YXMgYWxzbyByZWxlYXNlZCBhcyBhIHNpbmdsZSBpbiB0aGUgc2FtZSB5ZWFyIHdpdGggXCJIZXkgWW91XCIgYXMgdGhlIEItc2lkZS4gSXQgaXMgb25lIG9mIG9ubHkgdGhyZWUgc29uZ3Mgb24gdGhlIGFsYnVtIGZvciB3aGljaCB3cml0aW5nIGNyZWRpdHMgYXJlIHNoYXJlZCBiZXR3ZWVuIFJvZ2VyIFdhdGVycyBhbmQgRGF2aWQgR2lsbW91ci4gVGhlIG1lbG9keSBhbmQgbW9zdCBvZiB0aGUgbXVzaWMgd2FzIHdyaXR0ZW4gYnkgR2lsbW91ciB3aGlsZSBXYXRlcnMgY29udHJpYnV0ZWQgdGhlIGx5cmljcyBhbmQgc29tZSBhZGRpdGlvbmFsIG5vdGVzLiBUaGUgc29uZyBoYWQgdGhlIHdvcmtpbmcgdGl0bGUgb2YgXCJUaGUgRG9jdG9yXCIuXG5UaGUgc29uZyBpcyBvbmUgb2YgUGluayBGbG95ZCdzIG1vc3QgZmFtb3VzLCBhbmQgaXMgcmVub3duZWQgZXNwZWNpYWxseSBmb3IgaXRzIGd1aXRhciBzb2xvcy4gSW4gMjAwNCwgdGhlIHNvbmcgd2FzIHJhbmtlZCBudW1iZXIgMzE0IG9uIFJvbGxpbmcgU3RvbmUgbWFnYXppbmUncyBsaXN0IG9mIHRoZSA1MDAgR3JlYXRlc3QgU29uZ3Mgb2YgQWxsIFRpbWUuIEluIDIwMDUsIGl0IHdhcyB0aGUgbGFzdCBzb25nIGV2ZXIgdG8gYmUgcGVyZm9ybWVkIGJ5IFdhdGVycywgR2lsbW91ciwgV3JpZ2h0LCBhbmQgTWFzb24gdG9nZXRoZXIuIEluIDIwMTEsIHRoZSBzb25nIHdhcyByYW5rZWQgNXRoIGluIHRoZSBCQkMgUmFkaW8gNCdzIGxpc3RlbmVycycgRGVzZXJ0IElzbGFuZCBEaXNjcyBjaG9pY2VzLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0o4ZkZWT29xZXBjL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSjhmRlZPb3FlcGMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSjhmRlZPb3FlcGMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL0o4ZkZWT29xZXBjL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvSjhmRlZPb3FlcGMvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDQ1LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJKOGZGVk9vcWVwYyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJKOGZGVk9vcWVwYyIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxMi0xMS0wNVQxODo0OTo1NFoiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogImtDMngtUW81bEY1V1Zvdk9hVGZfbGNzd21DOCIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NHpNRVExTUVJeVJURkdOemhEUXpGQiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTA0LTA3VDE1OjE1OjQyWiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gXCJVcyBBbmQgVGhlbVwiIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiUGluayBGbG95ZCBcIlVzIEFuZCBUaGVtXCIgYWxidW0gXCJUaGUgRGFyayBTaWRlIE9mIFRoZSBNb29uXCIgMTk3M1xyXG5cclxuXHJcblVzLCBhbmQgdGhlbVxyXG5BbmQgYWZ0ZXIgYWxsIHdlcmUgb25seSBvcmRpbmFyeSBtZW4uXHJcbk1lLCBhbmQgeW91LlxyXG5Hb2Qgb25seSBrbm93cyBpdCdzIG5vdCB3aGF0IHdlIHdvdWxkIGNob29zZSB0byBkby5cclxuRm9yd2FyZCBoZSBjcmllZCBmcm9tIHRoZSByZWFyXHJcbkFuZCB0aGUgZnJvbnQgcmFuayBkaWVkLlxyXG5BbmQgdGhlIGdlbmVyYWwgc2F0IGFuZCB0aGUgbGluZXMgb24gdGhlIG1hcFxyXG5Nb3ZlZCBmcm9tIHNpZGUgdG8gc2lkZS5cclxuQmxhY2sgYW5kIGJsdWVcclxuQW5kIHdobyBrbm93cyB3aGljaCBpcyB3aGljaCBhbmQgd2hvIGlzIHdoby5cclxuVXAgYW5kIGRvd24uXHJcbkJ1dCBpbiB0aGUgZW5kIGl0J3Mgb25seSByb3VuZCBhbmQgcm91bmQuXHJcbkhhdmVuJ3QgeW91IGhlYXJkIGl0J3MgYSBiYXR0bGUgb2Ygd29yZHNcclxuVGhlIHBvc3RlciBiZWFyZXIgY3JpZWQuXHJcbkxpc3RlbiBzb24sIHNhaWQgdGhlIG1hbiB3aXRoIHRoZSBndW5cclxuVGhlcmUncyByb29tIGZvciB5b3UgaW5zaWRlLlxyXG5cclxuSSBtZWFuLCB0aGV5J3JlIG5vdCBndW5uYSBraWxsIHlhLCBzbyBpZiB5b3UgZ2l2ZSBlbSBhIHF1aWNrIHNob3J0LFxyXG5TaGFycCwgc2hvY2ssIHRoZXkgd29udCBkbyBpdCBhZ2Fpbi4gZGlnIGl0PyBJIG1lYW4gaGUgZ2V0IG9mZlxyXG5MaWdodGx5LCBjb3MgSSB3b3VsZHZlIGdpdmVuIGhpbSBhIHRocmFzaGluZyAtIEkgb25seSBoaXQgaGltIG9uY2UhXHJcbkl0IHdhcyBvbmx5IGEgZGlmZmVyZW5jZSBvZiBvcGluaW9uLCBidXQgcmVhbGx5Li4uaSBtZWFuIGdvb2QgbWFubmVyc1xyXG5Eb24ndCBjb3N0IG5vdGhpbmcgZG8gdGhleSwgZWg/IFxyXG5cclxuRG93biBhbmQgb3V0XHJcbkl0IGNhbid0IGJlIGhlbHBlZCBidXQgdGhlcmUncyBhIGxvdCBvZiBpdCBhYm91dC5cclxuV2l0aCwgd2l0aG91dC5cclxuQW5kIHdob2xsIGRlbnkgaXQncyB3aGF0IHRoZSBmaWdodGluZ3MgYWxsIGFib3V0PyBcclxuT3V0IG9mIHRoZSB3YXksIGl0J3MgYSBidXN5IGRheVxyXG5JdmUgZ290IHRoaW5ncyBvbiBteSBtaW5kLlxyXG5Gb3IgdGhlIHdhbnQgb2YgdGhlIHByaWNlIG9mIHRlYSBhbmQgYSBzbGljZVxyXG5UaGUgb2xkIG1hbiBkaWVkLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3NfWWF5ejVvLWwwL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvc19ZYXl6NW8tbDAvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvc19ZYXl6NW8tbDAvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiA0NiwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAic19ZYXl6NW8tbDAiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAic19ZYXl6NW8tbDAiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTAtMDgtMTdUMTA6MTI6MTZaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJ3VDJtUV9xZXdTSEY1ME1qTzRneFNUWVBWZ2siLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQyUXprNU1rRXpRalZGUWpZd1JEQTQiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wNC0wN1QxNToxNTo1M1oiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIExlYXJuaW5nIFRvIEZseSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2RzMGI0T1FkUWRBL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZHMwYjRPUWRRZEEvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZHMwYjRPUWRRZEEvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2RzMGI0T1FkUWRBL3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvZHMwYjRPUWRRZEEvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDQ3LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJkczBiNE9RZFFkQSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJkczBiNE9RZFFkQSIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxNy0xMC0yOVQyMDoxMToxNVoiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJ5b3V0dWJlI3BsYXlsaXN0SXRlbSIsCiAgICAgICJldGFnIjogIl9lUXJYXzRuSFlSSW1nWEpPQTNXRWNCTTU1byIsCiAgICAgICJpZCI6ICJVRXcwY0VkcmF6TlJRbGN5T0c0MlVVTkNWMk50UlRjMlVtODNUMDVGZW14TlJ5NDFOVFpFT1RoQk5UaEZPVVZHUWtWQiIsCiAgICAgICJzbmlwcGV0IjogewogICAgICAgICJwdWJsaXNoZWRBdCI6ICIyMDE5LTA0LTA3VDE1OjE2OjA3WiIsCiAgICAgICAgImNoYW5uZWxJZCI6ICJVQ18xM1JNSmJ4SVBTT09ETE5YaF83RVEiLAogICAgICAgICJ0aXRsZSI6ICJQaW5rIEZsb3lkIC0gQ29taW5nIEJhY2sgdG8gTGlmZSAtIFRoZSBEaXZpc2lvbiBCZWxsICh3aXRoIGFubm90ZWQgbHlyaWNzKSIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIk15IHNlY29uZCBmYXZvcml0ZSBzb25nIG9uIHRoaXMgYWxidW0uXG5cblRoZSBEaXZpc2lvbiBCZWxsXG4xLiBjbHVzdGVyIG9uZVxuMi4gd2hhdCBkbyB5b3Ugd2FudCBmcm9tIG1lXG4zLiBwb2xlcyBhcGFydFxuNC4gbWFyb29uZWRcbjUuIGEgZ3JlYXQgZGF5IGZvciBmcmVlZG9tXG42LiB3ZWFyaW5nIHRoZSBpbnNpZGUgb3V0XG43LiB0YWtpbmcgaXQgYmFja1xuOC4gQ09NSU5HIEJBQ0sgVE8gTElGRVxuOS4ga2VlcCB0YWxraW5nXG4xMC4gbG9zdCBmb3Igd29yZHNcbjExLiBoaWdoIGhvcGVzXG5cbklmIHlvdSBsaWtlIHRoaXMgc29uZywgY2hlY2sgb3V0IHRoZSBvdGhlcnMgZnJvbSB0aGlzIGFsYnVtLCBvciBvdGhlcnMgZnJvbSBQaW5rIEZsb3lkLiBZb3Ugd29uJ3QgYmUgZGlzYXBwb2ludGVkLlxuXG5MeXJpY3M6XG5XaGVyZSB3ZXJlIHlvdSB3aGVuIEkgd2FzIGJ1cm5lZCBhbmQgYnJva2VuXG5XaGlsZSB0aGUgZGF5cyBzbGlwcGVkIGJ5IGZyb20gbXkgd2luZG93IHdhdGNoaW5nXG5BbmQgd2hlcmUgd2VyZSB5b3Ugd2hlbiBJIHdhcyBodXJ0IGFuZCBJIHdhcyBoZWxwbGVzc1xuQmVjYXVzZSB0aGUgdGhpbmdzIHlvdSBzYXkgYW5kIHRoZSB0aGluZ3MgeW91IGRvIHN1cnJvdW5kIG1lXG5XaGlsZSB5b3Ugd2VyZSBoYW5naW5nIHlvdXJzZWxmIG9uIHNvbWVvbmUgZWxzZSdzIHdvcmRzXG5EeWluZyB0byBiZWxpZXZlIGluIHdoYXQgeW91IGhlYXJkXG5JIHdhcyBzdGFyaW5nIHN0cmFpZ2h0IGludG8gdGhlIHNoaW5pbmcgc3VuXG5cbkxvc3QgaW4gdGhvdWdodCBhbmQgbG9zdCBpbiB0aW1lXG5XaGlsZSB0aGUgc2VlZHMgb2YgbGlmZSBhbmQgdGhlIHNlZWRzIG9mIGNoYW5nZSB3ZXJlIHBsYW50ZWRcbk91dHNpZGUgdGhlIHJhaW4gZmVsbCBkYXJrIGFuZCBzbG93XG5XaGlsZSBJIHBvbmRlcmVkIG9uIHRoaXMgZGFuZ2Vyb3VzIGJ1dCBpcnJlc2lzdGlibGUgcGFzdGltZVxuXG5JIHRvb2sgYSBoZWF2ZW5seSByaWRlIHRocm91Z2ggb3VyIHNpbGVuY2Vcbkkga25ldyB0aGUgbW9tZW50IGhhZCBhcnJpdmVkXG5Gb3Iga2lsbGluZyB0aGUgcGFzdCBhbmQgY29taW5nIGJhY2sgdG8gbGlmZVxuXG5JIHRvb2sgYSBoZWF2ZW5seSByaWRlIHRocm91Z2ggb3VyIHNpbGVuY2Vcbkkga25ldyB0aGUgd2FpdGluZyBoYWQgYmVndW5cbkFuZCBJIGhlYWRlZCBzdHJhaWdodCBpbnRvIHRoZSBzaGluaW5nIHN1biIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL2NlSjN2OC1TMkljL2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvY2VKM3Y4LVMySWMvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvY2VKM3Y4LVMySWMvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgImNoYW5uZWxUaXRsZSI6ICJSb3NlIFRob3JuIiwKICAgICAgICAicGxheWxpc3RJZCI6ICJQTDRwR2trM1FCVzI4bjZRQ0JXY21FNzZSbzdPTkV6bE1HIiwKICAgICAgICAicG9zaXRpb24iOiA0OCwKICAgICAgICAicmVzb3VyY2VJZCI6IHsKICAgICAgICAgICJraW5kIjogInlvdXR1YmUjdmlkZW8iLAogICAgICAgICAgInZpZGVvSWQiOiAiY2VKM3Y4LVMySWMiCiAgICAgICAgfQogICAgICB9LAogICAgICAiY29udGVudERldGFpbHMiOiB7CiAgICAgICAgInZpZGVvSWQiOiAiY2VKM3Y4LVMySWMiLAogICAgICAgICJ2aWRlb1B1Ymxpc2hlZEF0IjogIjIwMTAtMDgtMjRUMjI6NTk6MTZaIgogICAgICB9LAogICAgICAic3RhdHVzIjogewogICAgICAgICJwcml2YWN5U3RhdHVzIjogInB1YmxpYyIKICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAieW91dHViZSNwbGF5bGlzdEl0ZW0iLAogICAgICAiZXRhZyI6ICJhMGtrb0tJd1JSVzJVUEtXdWVGalBWZ0ZRZUEiLAogICAgICAiaWQiOiAiVUV3MGNFZHJhek5SUWxjeU9HNDJVVU5DVjJOdFJUYzJVbTgzVDA1RmVteE5SeTQzTkVSQ01ESXpRekZCTUVSQ01FRTMiLAogICAgICAic25pcHBldCI6IHsKICAgICAgICAicHVibGlzaGVkQXQiOiAiMjAxOS0wNC0wN1QxNToxNjo0NloiLAogICAgICAgICJjaGFubmVsSWQiOiAiVUNfMTNSTUpieElQU09PRExOWGhfN0VRIiwKICAgICAgICAidGl0bGUiOiAiUGluayBGbG95ZCAtIE1hcm9vbmVkIFtIUV0iLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJEaXNjbGFpbWVyOiBObyBjb3B5cmlnaHQgaW5mcmluZ2VkIGludGVudGVkLiBJIGRvIG5vdCBvd24gYW55dGhpbmcgaW4gdGhlIHZpZGVvLCBldmVyeXRoaW5nIGJlbG9uZ3MgdG8gdGhlaXIgcmVzcGVjdGl2ZSBvd25lcnMuIFRoaXMgaXMgc2ltcGx5IG1hZGUgZm9yIHRoZSBlbnRlcnRhaW5tZW50IG9mIGZhbnMgbGlrZSBteXNlbGYuIFxuXG5BIGpvdXJuZXkgdGhyb3VnaCB0aGUgVW5pdmVyc2UgYWNjb21wYWluZWQgYnkgdGhlIG5vdGVzIG9mIG9uZSBvZiB0aGUgbW9zdCBhbWF6aW5nIERhdmlkIEdpbG1vdXInIHNvbG9zLi4uXG5cbk15IG5ldyBhc3Ryb25vbXkgYW5pbWF0aW9uLCBJIGhvcGUgeW91IGxpa2UgaXQuLi5cbkNyZWRpdHM6IGh0dHA6Ly9odWJibGVzaXRlLm9yZy9cblxuXCJNYXJvb25lZFwiIGlzIGFuIGluc3RydW1lbnRhbCB0cmFjayBvbiBQaW5rIEZsb3lkJ3MgMTk5NCBhbGJ1bSwgVGhlIERpdmlzaW9uIEJlbGw7IHRoZSB0cmFjayB3b24gYSBHcmFtbXkgQXdhcmQgaW4gMTk5NS5cblxuVGhlIHBpZWNlIHdhcyB3cml0dGVuIGJ5IERhdmlkIEdpbG1vdXIgYW5kIFJpY2hhcmQgV3JpZ2h0Lkl0IGhhcyBzb3VuZHMgdGhhdCBkZXNjcmliZSB0aGUgc2V0dGluZyBhcyBhbiBpc2xhbmQgKHN1Y2ggYXMgc2VhZ3VsbHMgYW5kIHdhdmVzIGNyYXNoaW5nIG9uIHRoZSBzaG9yZSkuIEl0IHdhcyBjb21wb3NlZCB3aGlsZSBqYW1taW5nIGFib2FyZCB0aGUgQXN0b3JpYSBpbiBlYXJseSAxOTkzLiBUaGUgaGlnaC1waXRjaCBndWl0YXIgc291bmRzIG9uIHRoZSB0cmFjayBjYW1lIGZyb20gYSBXaGFtbXkgcGVkYWwgd2hpY2ggbWFrZXMgdGhlIGd1aXRhciBzb3VuZCBhbiBvY3RhdmUgaGlnaGVyLCBhbHNvIGtub3duIGFzIGEgcGl0Y2ggc2hpZnRlci4gQWxzbyBpbiB0aGUgYmFja2dyb3VuZCBjYW4gYmUgaGVhcmQgdGhlIHdhaWxpbmcgZ3VpdGFyIGVmZmVjdHMgZnJvbSB0aGUgb3JpZ2luYWwgcmVjb3JkaW5nIG9mIHRoZSBQaW5rIEZsb3lkIHNvbmcgXCJFY2hvZXMsXCIgd2hpY2ggd2VyZSByZWR1YmJlZCBvbnRvIHRoaXMgc29uZyBieSBHaWxtb3VyIGZvciBpbmNyZWFzZWQgdGV4dHVyYWwgZWZmZWN0LlxuXG5EYXZpZCBHaWxtb3VyIGhhcyBtZW50aW9uZWQgdGhhdCBcInByZXR0eSBtdWNoXCIgYWxsIG9mIFwiTWFyb29uZWRcIiBpcyBpbXByb3Zpc2VkIGFuZCB0aGF0IGhlIFwicHJvYmFibHkgdG9vayB0aHJlZSBvciBmb3VyIHBhc3NlcyBhdCBpdCBhbmQgdG9vayB0aGUgYmVzdCBiaXRzIG91dCBvZiBlYWNoXCIuXG5cblRoZSB0cmFjayB3YXMgZ2l2ZW4gYSBHcmFtbXkgQXdhcmQgaW4gdGhlIGNhdGVnb3J5IG9mIEJlc3QgUm9jayBJbnN0cnVtZW50YWwgUGVyZm9ybWFuY2UgYXQgdGhlIEdyYW1teSBBd2FyZHMgb2YgMTk5NS5cblxuVGhpcyBzb25nIGhhcyBvbmx5IGJlZW4gcGxheWVkIGxpdmUgdGhyZWUgdGltZXM6IE9uIHRoZSB0d28gZGF0ZXMgaW4gT3NsbywgTm9yd2F5IChvbmUgb2Ygd2hpY2ggaXMgZmVhdHVyZWQgb24gdGhlIFB1bHNlIERWRCkgb24gdGhlIDE5OTQgXCJUaGUgRGl2aXNpb24gQmVsbFwiIHRvdXIgYW5kIGF0IHRoZSBcIlRoZSBTdHJhdCBQYWNrXCIgY2hhcml0eSBjb25jZXJ0LCBmb3IgdGhlIDUwdGggYW5uaXZlcnNhcnkgb2YgdGhlIEZlbmRlciBTdHJhdG9jYXN0ZXIgZ3VpdGFyLCB3aGVyZSBHaWxtb3VyIHBsYXllZCBoaXMgXCIjMDAwMVwiIFN0cmF0b2Nhc3Rlci5cblxuQW4gZXhjZXJwdCBvZiB0aGUgbXVzaWMgaXMgZmVhdHVyZWQgb24gRWNob2VzOiBUaGUgQmVzdCBvZiBQaW5rIEZsb3lkLiIsCiAgICAgICAgInRodW1ibmFpbHMiOiB7CiAgICAgICAgICAiZGVmYXVsdCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pyejhOdUFMdWo4L2RlZmF1bHQuanBnIiwKICAgICAgICAgICAgIndpZHRoIjogMTIwLAogICAgICAgICAgICAiaGVpZ2h0IjogOTAKICAgICAgICAgIH0sCiAgICAgICAgICAibWVkaXVtIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvenJ6OE51QUx1ajgvbXFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDMyMCwKICAgICAgICAgICAgImhlaWdodCI6IDE4MAogICAgICAgICAgfSwKICAgICAgICAgICJoaWdoIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvenJ6OE51QUx1ajgvaHFkZWZhdWx0LmpwZyIsCiAgICAgICAgICAgICJ3aWR0aCI6IDQ4MCwKICAgICAgICAgICAgImhlaWdodCI6IDM2MAogICAgICAgICAgfSwKICAgICAgICAgICJzdGFuZGFyZCI6IHsKICAgICAgICAgICAgInVybCI6ICJodHRwczovL2kueXRpbWcuY29tL3ZpL3pyejhOdUFMdWo4L3NkZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiA2NDAsCiAgICAgICAgICAgICJoZWlnaHQiOiA0ODAKICAgICAgICAgIH0sCiAgICAgICAgICAibWF4cmVzIjogewogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vaS55dGltZy5jb20vdmkvenJ6OE51QUx1ajgvbWF4cmVzZGVmYXVsdC5qcGciLAogICAgICAgICAgICAid2lkdGgiOiAxMjgwLAogICAgICAgICAgICAiaGVpZ2h0IjogNzIwCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiY2hhbm5lbFRpdGxlIjogIlJvc2UgVGhvcm4iLAogICAgICAgICJwbGF5bGlzdElkIjogIlBMNHBHa2szUUJXMjhuNlFDQldjbUU3NlJvN09ORXpsTUciLAogICAgICAgICJwb3NpdGlvbiI6IDQ5LAogICAgICAgICJyZXNvdXJjZUlkIjogewogICAgICAgICAgImtpbmQiOiAieW91dHViZSN2aWRlbyIsCiAgICAgICAgICAidmlkZW9JZCI6ICJ6cno4TnVBTHVqOCIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJjb250ZW50RGV0YWlscyI6IHsKICAgICAgICAidmlkZW9JZCI6ICJ6cno4TnVBTHVqOCIsCiAgICAgICAgInZpZGVvUHVibGlzaGVkQXQiOiAiMjAxMi0wMS0wOVQxNDo1Njo0NVoiCiAgICAgIH0sCiAgICAgICJzdGF0dXMiOiB7CiAgICAgICAgInByaXZhY3lTdGF0dXMiOiAicHVibGljIgogICAgICB9CiAgICB9CiAgXSwKICAicGFnZUluZm8iOiB7CiAgICAidG90YWxSZXN1bHRzIjogMTMxLAogICAgInJlc3VsdHNQZXJQYWdlIjogNTAKICB9Cn0K
  recorded_at: Wed, 08 Jul 2020 03:22:11 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&pageToken=CDIQAA&part=snippet,contentDetails,status&playlistId=PL4pGkk3QBW28n6QCBWcmE76Ro7ONEzlMG
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 08 Jul 2020 03:22:11 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 08 Jul 2020 03:22:11 GMT
- request:
    method: get
    uri: https://www.googleapis.com/youtube/v3/playlistItems?key=<YOUTUBE_API_KEY>&maxResults=50&pageToken=CGQQAA&part=snippet,contentDetails,status&playlistId=PL4pGkk3QBW28n6QCBWcmE76Ro7ONEzlMG
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v1.0.1
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Wed, 08 Jul 2020 03:22:12 GMT
      Server:
      - scaffolding on HTTPServer2
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - h3-29=":443"; ma=2592000,h3-27=":443"; ma=2592000,h3-25=":443"; ma=2592000,h3-T050=":443";
        ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000,quic=":443"; ma=2592000; v="46,43"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 08 Jul 2020 03:22:12 GMT
recorded_with: VCR 6.0.0
